{"version":3,"sources":["m2d2.min.js","utils.src.js","m2d2.src.js"],"names":["root","factory","[object Object]","events","datasetNodes","define","exports","module","m2d2","this","Utils","t","isNaN","parseFloat","isFinite","trim","indexOf","constructor","name","Array","isArray","HTMLElement","Node","DocumentFragment","isObject","Object","keys","length","isElement","console","log","e","style","display","r","visibility","getBoundingClientRect","top","left","bottom","window","innerHeight","document","documentElement","clientHeight","right","innerWidth","clientWidth","width","height","filter","newElement","querySelector","hasAttrOrProp","hasAttr","getAttribute","hasProp","isNumeric","type","hasAttribute","i","setAttr","setAttribute","removeAttribute","defineProperty","enumerable","writable","innerHTML","content","firstChild","createElement","Reflect","getPrototypeOf","ownKeys","append","prepend","datasets","styleNodes","styles","forEach","Element","prototype","s","from","domNode","apply","instance","getProxyNode","onready","utils","isFunction","addEventListener","once","setTimeout","dispatchEvent","CustomEvent","_stored","push","getMethods","main","isEmpty","isValidElement","extensions","assign","error","isNode","isString","_m2d2","hasOwnProperty","childNodes","innerText","textContent","nodeValue","createTextNode","classList","className","join","isPlainObject","add","remove","isVisible","getComputedStyle","getElementsByTagName","tagName","_m2d2_display","removeProperty","dataset","onshow","inView","posterior","nextElementSibling","anterior","previousElementSibling","parent","extDom","parentElement","sibling","find","findAll","children","querySelectorAll","index","parentNode","oninput","value","getData","FormData","n","entries","show","files","newEmptyNode","warn","plainToObject","includes","updateValue","o","l","Date","isBool","setPropOrAttr","match","render","linkNode","a","template","doItems","renderAndLink","items","appendElement","dt","dd","text","id","updates","onload","DOMStringMap","CSSStyleDeclaration","isHtml","html","isUpdateLink","src","doDom","proxy","getTemplate","cloneNode","addTemplatesToItem","setUniqueAttrib","addTemplatesToObjectDeep","getItemWithEvents","__template","getItem","removeChild","extendItems","_template","htmlElement","childElementCount","defineProp","isSelectorID","childrenElementCount","get","set","onupdate","detail","property","newValue","startsWith","setShortValue","short","Proxy","bind","getShortValue","clear","oldValue","target","splice","storedEventsTimeout","getAttrOrProp","attributeName","addedNodes","removedNodes","nodeName","MutationObserver","onObserve","attributeOldValue","subtree","childList","observe","getOwnPropertyNames","concat","some","appendChild","sort","localeCompare"],"mappings":"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","file":"m2d2.min.js","sourcesContent":["!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?module.exports=t():e.m2d2=t()}(this,(function(){\"use strict\";class e{isString(e){return\"string\"==typeof e}isBool(e){return\"boolean\"==typeof e}isNumeric(e){return!isNaN(parseFloat(e))&&isFinite(e)}isSelectorID(e){return 0===(e+\"\").trim().indexOf(\"#\")}isPlainObject(e){return\"Object\"===e.constructor.name}isObject(e){return\"object\"==typeof e}isArray(e){return Array.isArray(e)}isFunction(e){return\"function\"==typeof e}isElement(e){return e instanceof HTMLElement}isNode(e){return e instanceof Node||e instanceof DocumentFragment}isHtml(e){return-1!==(e+\"\").trim().indexOf(\"<\")}isEmpty(e){return void 0===e||this.isObject(e)&&0===Object.keys(e).length||\"\"===e}isVisible(e){if(!this.isElement(e))return console.log(\"(isVisible) Not an element: \"),console.log(e),!1;const t=\"none\"!==e.style.display,s=\"hidden\"!==e.style.visibility;return t&&s}inView(e){const t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)&&t.width>0&&t.height>0}cleanArray(e){return e.filter((function(e){return 0===e||e}))}isValidElement(e){const t=this.newElement(e);return\"template\"!==e&&\"HTMLUnknownElement\"!==t.constructor.name}exists(e){return null!==document.querySelector(e)}getAttrOrProp(e,t){let s=\"\";return this.hasAttrOrProp(e,t)&&(s=this.hasAttr(e,t)?e.getAttribute(t):e[t]),s}hasAttrOrProp(e,t){return this.hasAttr(e,t)||this.hasProp(e,t)}hasAttr(e,t){let s=!1;if(e&&!this.isNumeric(t))switch(t){case\"checked\":s=void 0!==e.type&&(\"radio\"===e.type||\"checkbox\"===e.type);break;default:s=void 0!==e.hasAttribute&&e.hasAttribute(t)}return s}hasProp(e,t){let s=!1;if(e&&!this.isNumeric(t)){let i=void 0!==e[t];i&&null===e[t]&&\"value\"===t&&(i=!1),s=i&&!(e[t]instanceof Node)&&!e.hasAttribute(t)}return s}setPropOrAttr(e,t,s){if(this.hasProp(e,t))try{e[t]=s}catch(i){this.setAttr(e,t,s)}else this.setAttr(e,t,s)}setAttr(e,t,s){s?e.setAttribute(t,s):e.removeAttribute(t)}defineProp(e,t,s){this.isObject(e)&&void 0===e[t]&&(Object.defineProperty(e,t,{enumerable:!1,writable:!0}),e[t]=s)}htmlElement(e){const t=this.newElement(\"template\");return t.innerHTML=e.trim(),t.content.firstChild}newElement(e){return e&&!this.isNumeric(e)||(e=\"invalid\"),document.createElement(e)}newEmptyNode(){return new DocumentFragment}getMethods(e){const t=Reflect.getPrototypeOf(e),s=Reflect.getPrototypeOf(t);return Reflect.ownKeys(t).filter(e=>Reflect.ownKeys(s).indexOf(e)<0)}appendAllChild(e,t){for(;e.firstChild;)t.append(e.firstChild)}prependAllChild(e,t){for(;e.firstChild;)t.prepend(e.firstChild)}}class t{\"use strict\";_stored={events:[],datasetNodes:[],datasets:[],styleNodes:[],styles:[]};static storedEventsTimeout=50;static short=!0;static updates=!0;static utils=new e;constructor(){[\"after\",\"before\",\"append\",\"prepend\",\"insertAdjacentElement\",\"replaceWith\"].forEach(e=>{Element.prototype[\"_\"+e]=Element.prototype[e],Element.prototype[e]=function(...t){const s=Array.from(t);s.forEach((e,t)=>{void 0!==e&&void 0!==e.domNode&&e.domNode instanceof Element&&(s[t]=e.domNode)}),this[\"_\"+e].apply(this,s)}})}static instance=new t;static extensions={};static main=(()=>{const e=(e,s)=>{const i=this.instance.getProxyNode(e,s);return i&&i.onready&&t.utils.isFunction(i.onready)&&(i.addEventListener(\"ready\",i.onready,{once:!0}),setTimeout(()=>{i.dispatchEvent(new CustomEvent(\"ready\"))},10)),[\"dataset\",\"style\"].forEach(e=>{i&&i[e]&&(this.instance._stored[e+\"s\"].push(i[e]),this.instance._stored[e+\"Nodes\"].push(i))}),i};return t.utils.getMethods(t.utils).forEach(s=>{e[s]=t.utils[s]}),e})();static ready(e){document.addEventListener(\"DOMContentLoaded\",()=>{e(t.main)})}static load(e){if(void 0!==e){const s=e(t.main);t.utils.isObject(s)&&!t.utils.isEmpty(s)&&Object.keys(s).forEach(e=>{if(t.utils.isValidElement(e)){void 0===t.extensions[e]&&(t.extensions[e]={});const i=t.utils.newElement(e);Object.keys(s[e]).forEach(s=>{t.utils.hasProp(i,s)&&console.log(\"Warning: property [\"+s+\"] already exists in node: [\"+e+\"] while trying to extend it. Unexpected behaviour may happen.\")}),Object.assign(t.extensions[e],s[e])}else{void 0===t.extensions[\"*\"]&&(t.extensions[\"*\"]={});const i=t.utils.newElement(\"div\");Object.keys(s[e]).forEach(e=>{t.utils.hasProp(i,e)&&console.log(\"Warning: property [\"+e+\"] already exists in Node while trying to extend it. Unexpected behaviour may happen.\")}),Object.assign(t.extensions[\"*\"],s[e])}})}return t.main}extDom(e,s){if(!e)return console.error(\"Selector was empty\"),null;void 0===s&&(s=document);const i=t.utils.isNode(e)?e:s.querySelector(e);if(!i)return t.utils.isString(e)?(console.error(\"Selector: \"+e+\" didn't match any element in node:\"),console.log(s)):console.error(\"Node was null\"),null;if(void 0===i._m2d2){i._m2d2=!0,[\"parent\",\"sibling\",\"posterior\",\"anterior\",\"find\",\"findAll\",\"onupdate\",\"onready\",\"show\",\"onshow\",\"inView\",\"css\",\"text\",\"html\",\"getData\",\"index\"].forEach(e=>{i.hasOwnProperty(e)&&(console.log(\"Node already had [\"+e+\"] property. It might cause unexpected behaviour.\"),console.log(\"You may need to update the M2D2 version or report it to: github.com/intellisrc/m2d2/\"))}),Object.defineProperty(i,\"text\",{get(){return this.childNodes.length?this.innerText:this.textContent},set(e){if(this.childNodes.length){let t=!1;this.childNodes.forEach(s=>{\"Text\"===s.constructor.name&&(s.nodeValue=e,t=!0)}),t||this.prepend(document.createTextNode(e))}else this.textContent=e}}),Object.defineProperty(i,\"html\",{get(){return this.innerHTML},set(e){this.innerHTML=e}}),Object.defineProperty(i,\"css\",{get(){return this.classList},set(e){t.utils.isArray(e)?this.className=e.join(\" \"):t.utils.isString(e)?this.className=e:t.utils.isPlainObject(e)?Object.keys(e).forEach(t=>{e[t]?this.classList.add(t):this.classList.remove(t)}):console.error(\"Trying to assign a wrong value to css : \"+e)}}),Object.defineProperty(i,\"show\",{get(){return t.utils.isVisible(this)},set(e){const s=()=>getComputedStyle(this,null).display,i=()=>{const e=document.getElementsByTagName(\"body\")[0],t=document.createElement(\"template\"),s=document.createElement(this.tagName);t.append(s),e.append(t);const i=getComputedStyle(s,null).display;return t.remove(),i};if(e){if(\"none\"===s()){if(this._m2d2_display)this.style.display=this._m2d2_display;else if(this.style.removeProperty(\"display\"),\"none\"===s()){const e=i();this.style.display=this.dataset.display||(\"none\"!==e?e:\"block\")}void 0!==this.onshow&&t.utils.isFunction(this.onshow)&&this.onshow(this)}}else{const e=\"none\"!==this.style.display?this.style.display:s();\"none\"!==e&&(this._m2d2_display=e),this.style.display=\"none\"}}});let e={};return void 0!==t.extensions[\"*\"]&&Object.assign(e,t.extensions[\"*\"]),void 0!==t.extensions[i.tagName]&&Object.assign(e,t.extensions[i.tagName]),Object.assign(i,{inView:()=>t.utils.inView(i),posterior:()=>i.nextElementSibling,anterior:()=>i.previousElementSibling,parent:()=>this.extDom(i.parentElement),sibling:e=>i.parentElement.find(e),find:e=>{const t=i.querySelector(e);return t?this.extDom(t):null},findAll:e=>{const t=void 0===e?Array.from(i.children):i.querySelectorAll(e);return t.forEach(e=>{this.extDom(e)}),t}},e),void 0===i.index&&(i.index=()=>Array.from(i.parentNode.children).indexOf(i)),[\"INPUT\",\"TEXTAREA\",\"SELECT\"].indexOf(i.tagName)>=0&&t.utils.hasAttrOrProp(i,\"value\")&&(i.oninput=function(){this.setAttribute(\"value\",this.value)}),\"FORM\"===i.tagName&&(i.getData=function(e){const s={},n=new FormData(this),o=e||!1;for(let e of n.entries()){const n=i.find(\"[name='\"+e[0]+\"']\");if(o||\"hidden\"===n.type||n.show){const i=e[0],o=\"file\"===n.type?n.files:e[1];void 0!==s[i]?t.utils.isArray(s[i])?s[i].push(o):s[i]=[s[i],o]:s[i]=o}}return s}),i}return i}doDom(e,s){if(t.utils.isObject(e)&&void 0===s&&(s=e,e=t.utils.newEmptyNode(),void 0===s.warn&&(s.warn=!1)),!(t.utils.isString(e)||t.utils.isElement(e)||t.utils.isNode(e)))return console.error(\"Selector is not a string or a Node:\"),console.log(e),null;if(t.utils.isString(e)&&!document.querySelector(e))return console.log(\"Selected element doesn't exists: \"+e),null;const i=this.extDom(e);if(void 0===s)return i;if(s=this.plainToObject(i,s),Object.keys(s).filter(e=>![\"tagName\"].includes(e)).forEach(e=>{let n=s[e];null==n&&(console.log(\"Value was not set for key: \"+e+\", 'empty' was used in object: \"),console.log(s),console.log(\"In node:\"),console.log(i),n=\"\");let o=this.updateValue(i,e,n),l=t.utils.hasProp(i,e),r=!1;if(t.utils.hasAttr(i,e)||l)switch(!0){case\"value\"===e&&t.utils.hasProp(i,\"valueAsDate\")&&o instanceof Date:e=\"valueAsDate\";case\"css\"===e:case typeof o==typeof i[e]:case t.utils.isString(i[e])&&t.utils.isNumeric(o):case t.utils.isFunction(o)&&t.utils.isObject(i[e]):case t.utils.isBool(o)&&t.utils.isString(i[e]):case\"object\"==typeof i[e]&&\"INPUT\"===i.tagName:r=!0}if(r){let s=!1;switch(e){case\"classList\":t.utils.isArray(o)?o.forEach(t=>{i[e].add(t)}):t.utils.isString(o)?i[e].add(o):s=!0;break;case\"style\":case\"dataset\":t.utils.isPlainObject(o)?Object.keys(o).forEach(t=>{i[e][t]=this.updateValue(i[e],t,o[t])}):s=!0;break;default:switch(!0){case t.utils.isBool(o):case t.utils.hasAttrOrProp(i,e):t.utils.setPropOrAttr(i,e,o);break;default:i[e]=o}}s&&(console.error(\"Invalid value passed to '\"+e+\"': \"),console.log(o),console.log(\"Into Node:\"),console.log(i))}else{const l=[];try{if(\"template\"!==e&&!t.utils.isFunction(o)){if(e&&e.match(/^\\w/)){let t=i.find(\"#\"+e);t&&-1===l.indexOf(t)&&l.push(t),t=i.find(\"[name='\"+e+\"']\"),t&&-1===l.indexOf(t)&&l.push(t);const s=Array.from(i.findAll(\".\"+e)).filter(e=>l.indexOf(e)<0);s.length>0&&s.forEach(e=>l.push(e))}const t=Array.from(i.findAll(e)).filter(e=>l.indexOf(e)<0);t.length>0&&t.forEach(e=>l.push(e))}}catch(t){return console.error(\"Invalid selector: \"+e),void console.log(t)}if(l.length>1){const t=[];l.forEach(s=>{t.push(this.render(s,e,o))}),this.linkNode(i,e,t),void 0!==o.warn&&!1===o.warn||(console.log(\"Multiple elements were assigned with key: [\"+e+\"] under node: \"),console.log(i),console.log(\"It might be what we expect, but if it is not expected it could result on some elements mistakenly rendered. You can specify 'warn : false' under that element to hide this message.\"))}else if(1===l.length){const r=l[0];if(t.utils.isElement(r)){const l=this.plainToObject(r,o),a=t.utils.isPlainObject(l)&&Object.keys(l).length>=1?Object.keys(l)[0]:null;if(a&&(o=this.updateValue(r,a,n)),t.utils.isArray(o)){const t=s.template;this.doItems(r,o,t),this.linkNode(i,e,r)}else this.renderAndLink(i,r,e,o)}else console.error(\"BUG: It should have been a node but got: \"),console.log(r),console.log(\"Parent node:\"),console.log(i)}else if(0===l.length){\"template\"===e&&void 0===s.items&&(e=\"items\",o=[]);const n=t.utils.isFunction(o);if(void 0!==o.tagName){const t=this.appendElement(i,o.tagName);this.renderAndLink(i,t,e,o)}else if(t.utils.isValidElement(e)&&!n){const t=this.appendElement(i,e);this.renderAndLink(i,t,e,o)}else if(\"items\"===e){const e=s.template;if(t.utils.isPlainObject(o)){const e=[];Object.keys(o).forEach(s=>{let n;\"DL\"===i.tagName?n={dt:s,dd:o[s]}:(n={text:o[s]},t.utils.hasAttrOrProp(i,\"value\")?n.value=s:n.dataset={id:s}),e.push(n)}),o=e}t.utils.isArray(o)?this.doItems(i,o,e):(console.log(\"Warning: 'items' specified but value is not and array, in element: \"),console.log(i),console.log(\"Passed values are: \"),console.log(o))}else n?(t.updates&&\"onupdate\"===e&&i.addEventListener(\"update\",o,!0),i[e]=o):\"template\"!==e&&\"warn\"!==e&&!1!==o&&(void 0!==s.warn&&!1===s.warn||(console.error(\"Not sure what you want to do with key: \"+e+\" under element: \"),console.log(i),console.log(\"And object:\"),console.log(s),console.log(\"Most likely the element's property or child no longer exists or the value passed to it is incorrect.\"),console.log(\"You can set 'warn : false' property to the element to dismiss this message.\")),i[e]=o)}}}),i.onload){const e=[\"BODY\",\"FRAME\",\"IFRAME\",\"IMG\",\"LINK\",\"SCRIPT\",\"STYLE\"].indexOf(i.tagName)>=0,t=\"INPUT\"===i.tagName&&\"image\"===i.type;e||t||i.dispatchEvent(new CustomEvent(\"load\"))}return i}isUpdateLink(e){let s=!1;if(t.utils.isArray(e)&&(2===e.length||3===e.length)){const i=2===e.length,n=t.utils.isNode(e[0])||e[0]instanceof DOMStringMap||e[0]instanceof CSSStyleDeclaration,o=i?t.utils.isString(e[1]):t.utils.isString(e[1])&&t.utils.isFunction(e[2]);s=n&&o,s&&i&&e.push(e=>e)}return s}plainToObject(e,s){if(!t.utils.isPlainObject(s)&&!t.utils.isFunction(s)&&!t.utils.isElement(s))if(t.utils.isHtml(s))s={html:s};else if(this.isUpdateLink(s)){const i=s[0],n=s[1],o=s[2];let l=this.plainToObject(e,o(i[n]));if(t.utils.isPlainObject(l)){const e={};Object.keys(l).forEach(t=>{e[t]=s}),s=e}}else t.utils.isArray(s)?s={items:s}:t.utils.hasAttrOrProp(e,\"value\")?s=\"SELECT\"===e.tagName?{value:s,text:s}:\"BUTTON\"===e.tagName?{text:s}:{value:s}:t.utils.isString(s)&&\"IMG\"===e.tagName?s={src:s}:(t.utils.isString(s)||t.utils.isNumeric(s))&&(s={text:s});return s}renderAndLink(e,t,s,i){const n=this.render(t,s,i);this.linkNode(e,s,n)}render(e,t,s){return s=this.plainToObject(e,s),this.doDom(e,s)}linkNode(e,s,i){if(e[s]===i){const t=this.proxy(i);try{e[s]=t}catch(e){}e[\"$\"+s]=t}else t.utils.hasAttrOrProp(e,s)?(e[\"$\"+s]=i,console.log(\"Property : \"+s+\" existed in node: \"+e.tagName+\". Using $\"+s+\" instead for node: \"+i.tagName+\".\")):e[s]=this.proxy(i)}appendElement(e,s){const i=t.utils.newElement(s);return e.append(i),i}getItem(e,t,s,i){i||(i=this.getTemplate(e));const n=i.cloneNode(!0);this.addTemplatesToItem(i,n),n.dataset.id=t,this.setUniqueAttrib(n,\"selected\"),this.addTemplatesToObjectDeep(i,s);let o=this.doDom(n,s);return this.getItemWithEvents(e,o)}addTemplatesToObjectDeep(e,s){t.utils.isPlainObject(s)&&Object.keys(s).forEach(t=>{e[t]&&e[t].__template&&!s.template&&(s[t].template=e[t].__template),e[t]&&s[t]&&this.addTemplatesToObjectDeep(e[t],s[t])})}addTemplatesToItem(e,t){[\"_template\",\"__template\"].forEach(s=>{void 0!==e[s]&&(t[s]=e[s])})}getItemWithEvents(e,s){if(void 0!==e.__template){const i=(e,s)=>(s=s||{},Object.keys(e).forEach(n=>{t.utils.isPlainObject(e[n])?s[n]=i(e[n]):t.utils.isFunction(e[n])&&(s[n]=e[n])}),s);let n=i(e.__template);t.utils.isEmpty(n)||(n=n[Object.keys(n)[0]],s=this.doDom(s,n))}return s}doItems(e,t,s){const i=this.getTemplate(e,s);if(void 0===i)return console.error(\"Template not found. Probably an array is being used where it is not expected. Node:\"),console.log(e),console.log(\"Value (mistaken?):\"),void console.log(t);let n=0;t.forEach(t=>{t=this.plainToObject(e,t);const s=this.getItem(e,n++,t,i);s&&e.append(s)});const o=e.find(\"template\");o&&e.removeChild(o),e.items=e.children,this.extendItems(e)}getTemplate(e,s){if(void 0!==e._template&&\"\"!==e._template)return e._template;{let i;const n=e.querySelector(\"template\");if(n)i=t.utils.htmlElement(n.innerHTML.trim());else switch(e.tagName){case\"SELECT\":case\"DATALIST\":i=t.utils.newElement(\"option\");break;case\"UL\":case\"OL\":i=t.utils.newElement(\"li\");break;case\"NAV\":i=t.utils.newElement(\"a\");break;case\"DL\":i=t.utils.newElement(\"dd\");break;default:if(s&&t.utils.isPlainObject(s)){const n=Object.keys(s).length;if(n){if(n>1)if(void 0!==s.tagName){let e={};e[s.tagName]=s,s=e}else console.log(\"Template has more than one top elements. Using the first one. In: \"),console.log(s),console.log(\"Node: \"),console.log(e);const o=Object.keys(s)[0],l=s[o];t.utils.isValidElement(o)?i=t.utils.newElement(o):void 0!==l.tagName?(i=t.utils.newElement(l.tagName),s[l.tagName]=l,delete s[o]):(console.error(\"Template defined an element which can not be identified: [\"+o+\"], using <span> in:\"),console.log(s),console.log(\"Node: \"),console.log(e),i=t.utils.newElement(\"span\"))}else console.error(\"Template has no definition, and it can not be guessed. Using <span>. Template: \"),console.log(s),console.log(\"Node: \"),console.log(e),i=t.utils.newElement(\"span\")}else e.childElementCount>0&&(i=t.utils.htmlElement(e.innerHTML.trim()))}if(s)if(t.utils.isPlainObject(s)){const n=t.utils.newEmptyNode();n.append(i),i=this.doDom(n,s).children[0],t.utils.defineProp(e,\"__template\",s)}else i=t.utils.isHtml(s)?t.utils.htmlElement(s):t.utils.isSelectorID(s)?t.utils.htmlElement(document.querySelector(s).innerHTML):t.utils.newElement(s);if(i)if(i.childrenElementCount>1){console.log(\"Templates only supports a single child. Multiple children were detected, wrapping them with <span>. Template:\"),console.log(i);const e=t.utils.newElement(\"span\");e.append(i),i=e}else t.utils.defineProp(e,\"_template\",i);else console.log(\"Template was not found for element, using <span>:\"),console.log(e),i=t.utils.newElement(\"span\");return i}}setUniqueAttrib(e,s){e.hasOwnProperty(s)||Object.defineProperty(e,s,{get:function(){return this.hasAttribute(s)},set:function(e){const i=this.parentNode?this.parentNode.find(\"[\"+s+\"]\"):null;i&&i.removeAttribute(s),t.utils.setAttr(this,s,e)}})}updateValue(e,s,i){if(this.isUpdateLink(i)){const n=this,o=i[0],l=i[1],r=i[2];if(i=o[l],o instanceof CSSStyleDeclaration&&this._stored.styles.includes(o)){const i=this._stored.styleNodes[this._stored.styles.indexOf(o)];t.updates&&(i.onupdate=function(t){t.detail&&\"style\"===t.detail.property&&t.detail.newValue.startsWith(l+\":\")&&n.setShortValue(e,s,r(this.style[l]))})}else if(o instanceof DOMStringMap&&this._stored.datasets.includes(o)){const i=this._stored.datasetNodes[this._stored.datasets.indexOf(o)];t.updates&&(i.onupdate=t=>{t.detail&&t.detail.property===\"data-\"+l&&n.setShortValue(e,s,r(t.detail.newValue))})}else t.updates&&(o.onupdate=i=>{i.detail&&i.detail.property===l&&(t.utils.isObject(e[s])||n.setShortValue(e,s,r(i.detail.newValue)))})}return i}setShortValue(e,s,i){if(t.utils.isNode(e[s]))if(t.short){const n=this.plainToObject(e[s],i),o=t.utils.isPlainObject(n)&&Object.keys(n).length>=1?Object.keys(n)[0]:null;o&&(e[s][o]=i)}else console.log(\"Short is disabled. Trying to set a value (\"+i+\") in a node:\"),console.log(e[s]),console.log(\"Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'\");else e[s]=i}getShortValue(e,s,i){let n=null;if(t.utils.isNode(e[s]))if(t.short){const o=this.plainToObject(e[s],i||\"\"),l=t.utils.isPlainObject(o)&&Object.keys(o).length>=1?Object.keys(o)[0]:null;l&&(n=e[s][l])}else console.log(\"Short is disabled. Trying to get a value from node:\"),console.log(e[s]),console.log(\"Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'\");else n=e[s];return n}proxy(e,s){return!t.short||null===e||void 0!==e.domNode&&void 0===s?e:(e.domNode=e,new Proxy(e,{get:(e,s)=>{const i=e[s];switch(!0){case null==i:return null;case t.utils.isFunction(i):return i.bind(e);case i.domNode&&void 0!==e[\"$\"+s]:return e[\"$\"+s];case void 0===i.domNode&&t.utils.isElement(i):return this.proxy(i);default:return i}},set:(e,s,i)=>{let n=\"\";return t.utils.isElement(e[s])?(n=this.getShortValue(e,s,i),this.setShortValue(e,s,i)):\"onupdate\"===s?t.updates?t.utils.isFunction(i)?(e.addEventListener(\"update\",i,!0),n=e[s],e[s]=i):(console.error(\"Value passed to 'onupdate' is incorrect, in node:\"),console.log(e),console.log(\"Value: (not a function)\"),console.log(i)):(console.log(\"Updates are not available when `m2d2.updates == false`:\"),console.log(e)):\"items\"===s?(e.items.clear(),this.doItems(e,i)):(n=e[s],i=this.updateValue(e,s,i),e[s]=i),t.updates&&void 0!==e.onupdate&&i!==n&&e.dispatchEvent(new CustomEvent(\"update\",{detail:{type:typeof i,property:s,newValue:i,oldValue:n}})),!0}}))}onObserve(e,s){e.forEach(e=>{const s=e.target;if(!(this._stored.events.indexOf(e)>=0)&&(this._stored.events.push(e),setTimeout(()=>{const t=this._stored.events.indexOf(e);t>=0&&this._stored.events.splice(t,1)},t.storedEventsTimeout),void 0!==s.onupdate))if(\"attributes\"===e.type){const i=t.utils.getAttrOrProp(s,e.attributeName);i!==e.oldValue&&s.dispatchEvent(new CustomEvent(\"update\",{detail:{type:typeof i,property:e.attributeName,newValue:i,oldValue:e.oldValue}}))}else if(\"childList\"===e.type)if(\"#text\"===(e.addedNodes[0]||e.removedNodes[0]).nodeName){const t=e.addedNodes[0].textContent,i=e.removedNodes.length?e.removedNodes[0].textContent:null;t!==i&&s.dispatchEvent(new CustomEvent(\"update\",{detail:{type:typeof t,property:\"text\",newValue:t,oldValue:i}}))}else if(void 0!==s.items){const t=e.addedNodes,i=e.removedNodes;t!==i&&s.dispatchEvent(new CustomEvent(\"update\",{detail:{type:typeof t,property:\"items\",newValue:t,oldValue:i}}))}})}observe(e){if(t.updates){const t=new MutationObserver(this.onObserve.bind(this)),s={attributeOldValue:!0,subtree:!0,childList:!0},i=e.domNode||e;t.observe(i,s)}}getProxyNode(e,t){const s=this.doDom(e,t);if(s)return this.observe(s),this.proxy(s)}extendItems(e){function s(t){t.forEach(t=>{const s=t.parentNode.removeChild(t);e.append(s)})}const i=e.items;Object.getOwnPropertyNames(Array.prototype).concat([\"clear\",\"get\",\"remove\",\"selected\",\"first\",\"last\",\"findAll\"]).forEach(n=>{if(void 0===i[n]){let o=null;const l=this;switch(n){case\"copyWithin\":case\"fill\":case\"splice\":o=function(){console.log(\"Not available yet: \"+n)};break;case\"reverse\":o=function(...e){if(this.items.length){const t=Array.from(this.items),i=t[n](...e);return s(t),i}};break;case\"clear\":o=function(){for(;this.items[0];)this.items[0].remove()};break;case\"get\":o=function(e){let s=null;return this.items.length&&this.items.some(i=>{const n=t.utils.isNumeric(e)?1*i.dataset.id==1*e:i.dataset.id===e;if(i.dataset&&n)return s=i,!0}),s};break;case\"selected\":o=function(){return l.proxy(this.find(\":scope > [selected]\"))};break;case\"first\":o=function(){return l.proxy(this.items[0])};break;case\"last\":o=function(){return l.proxy(this.items[this.items.length-1])};break;case\"pop\":o=function(){if(this.items.length){const e=this[0].parentNode;return l.proxy(e.removeChild(this.items[this.items.length-1]))}};break;case\"push\":o=function(e){if(e=l.plainToObject(this,e),t.utils.isElement(e))this.append(e);else if(t.utils.isPlainObject(e)){const t=this.items.length,s=l.getItem(this,t,e);this.appendChild(s)}else console.log(\"Trying to push an unknown value into a list:\"),console.log(e)};break;case\"remove\":o=function(e){if(this.items.length){const t=this.items.get(e);1===t.length&&t.remove()}};break;case\"shift\":o=function(){if(this.items.length){const e=this.items[0].parentNode;return l.proxy(e.removeChild(this.items[0]))}};break;case\"sort\":o=function(e){if(this.items.length){const t=Array.from(this.items);t.sort(e||((e,t)=>e.text.localeCompare(t.text))),s(t)}};break;case\"unshift\":o=function(e){if(e=l.plainToObject(this,e),t.utils.isElement(e))this.prepend(e);else if(t.utils.isPlainObject(e)){const t=this.items.length,s=l.getItem(this,t,e);this.prepend(s)}else console.log(\"Trying to unshift an unknown value into a list:\"),console.log(e)};break;default:let i=n;switch(!0){case\"findAll\"===n:i=\"filter\";case t.utils.isFunction(Array.prototype[n]):const s=function(...t){const s=[];return Array.from(e.items).forEach(e=>{s.push(l.proxy(e))}),Array.from(s)[i](...t)};switch(n){case\"find\":o=function(...e){return t.utils.isString(e[0])?this.find(e[0]):s(...e)};break;case\"findAll\":o=function(...e){return 0===e.length?this.findAll():t.utils.isString(e[0])?this.findAll(e[0]):s(...e)};break;case\"concat\":o=function(...e){for(let s=0;s<e.length;s++)if(t.utils.isArray(e[s]))for(let i=0;i<e[s].length;i++){let n=e[s][i];if(!t.utils.isElement(n)&&(n=l.plainToObject(this,e[s][i]),t.utils.isPlainObject(n))){const e=this.items.length;n=l.getItem(this,e,n)}this.items.push(n)}};break;default:o=s}}}o&&t.utils.defineProp(i,n,o.bind(e))}})}}return t}));","// ------- Functions -------\n\"use strict\";\n/**\n * Functions useful to work with Javascript data and DOM\n * Used mainly in M2D2 core library but exposed to the\n * consumer.\n * @Author: A.Lepe <dev@alepe.com>\n *\n * This extension provides:\n * $.isString\n * $.isBool\n * $.isNumeric\n * $.isSelectorID\n * $.isPlainObject\n * $.isObject\n * $.isArray\n * $.isFunction\n * $.isElement\n * $.isNode\n * $.isHtml\n * $.isEmpty\n * $.isVisible\n * $.inView\n * $.cleanArray\n * $.isValidElement\n * $.exists\n * $.getAttrOrProp\n * $.hasAttrOrProp\n * $.hasAttr\n * $.hasProp\n * $.setPropOrAttr\n * $.setAttr\n * $.defineProp\n * $.htmlElement\n * $.newElement\n * $.newEmptyNode\n * $.getMethods\n * $.appendAllChild\n * $.prependAllChild\n */\nclass Utils {\n\t/**\n\t * Return true if variable is string\n\t * @param {*} v\n\t * @returns {boolean}\n\t */\n    isString(v) {\n        return typeof v === 'string';\n    };\n\t/**\n\t * Return true if variable is a boolean\n\t * @param {*} b\n\t * @returns {boolean}\n\t */\n    isBool(b) {\n        return typeof b === 'boolean';\n    };\n\t/**\n\t * Return true if variable is a number\n\t * @param {*} n\n\t * @returns {boolean}\n\t */\n    isNumeric(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\t/**\n\t * Return true if selector is an id selector\n\t * @param {string} s\n\t * @returns {boolean}\n\t */\n    isSelectorID(s) {\n        return (s + \"\").trim().indexOf(\"#\") === 0;\n    };\n\t/**\n\t * Returns true if object is a \"plain\" object (not an array)\n\t * @param o\n\t * @returns {boolean}\n\t */\n    isPlainObject(o) {\n        return o.constructor.name === \"Object\";\n    };\n\t/**\n\t * Returns true if variable is an object (any kind, e.g. Array)\n\t * @param {*} oa\n\t * @returns {boolean}\n\t */\n    isObject(oa) {\n        return typeof oa === 'object';\n    };\n\t/**\n\t * Returns true if object is an array\n\t * @param {object} a\n\t * @returns {boolean}\n\t */\n    isArray(a) {\n        return Array.isArray(a);\n    };\n\t/**\n\t * Returns true if object is a function\n\t * @param {object} f\n\t * @returns {boolean}\n\t */\n    isFunction(f) {\n        return typeof f === 'function';\n    };\n\t/**\n\t * Returns true if object is an HTMLElement\n\t * @param {object} n\n\t * @returns {boolean}\n\t */\n    isElement(n) {\n        return n instanceof HTMLElement;\n    };\n\n\t/**\n\t * Return true if object is a Node or DocumentFragment\n\t * @param {object} n\n\t * @returns {boolean}\n\t */\n    isNode(n) {\n    \treturn (n instanceof Node || n instanceof DocumentFragment);\n\t}\n\t/**\n\t * Return true if string seems to be an HTML code\n\t * @param {string} s\n\t * @returns {boolean}\n\t */\n    isHtml(s) {\n        return (s + \"\").trim().indexOf(\"<\") !== -1;\n    };\n\t/**\n\t * Checks if an object is empty\n\t * @param {object} obj\n\t * @returns {boolean}\n\t */\n    isEmpty(obj) {\n        return obj === undefined || (this.isObject(obj) && Object.keys(obj).length === 0) || obj === \"\";\n    };\n    /**\n     * Checks if an element is visible\n     * @param {HtmlElement}\n     * @returns {boolean}\n     */\n    isVisible(elem) {\n        if(! this.isElement(elem)) {\n            console.log(\"(isVisible) Not an element: \");\n            console.log(elem);\n            return false;\n        }\n        const display = elem.style.display !== \"none\";\n        const notHidden = elem.style.visibility !== \"hidden\";\n        return display && notHidden;\n    };\n    /**\n     * Checks if element is in view\n     * @param {HtmlElement}\n     * @returns {boolean}\n     */\n    inView(elem) {\n        const rect = elem.getBoundingClientRect();\n        return rect.top >= 0 && rect.left >= 0 &&\n               rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n               rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n               rect.width > 0 && rect.height > 0\n    }\n\t/**\n\t * Remove null, empty or undefined values from an array\n\t * @param {Array} a\n\t * @returns {Array}\n\t */\n    cleanArray(a) {\n        return a.filter(function(e){ return e === 0 || e });\n    };\n\t/**\n\t * Checks if a tag name is a valid HTML element\n\t * @param {string} tagName\n\t * @returns {boolean}\n\t */\n    isValidElement(tagName) {\n        const $node = this.newElement(tagName);\n        return tagName !== \"template\" && $node.constructor.name !== \"HTMLUnknownElement\";\n    }\n    /**\n     * Returns true if element exists in DOM based on selector\n     */\n    exists(selector) {\n        return document.querySelector(selector) !== null;\n    }\n\t/**\n\t * Get attribute or property\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @returns {*}\n\t */\n\tgetAttrOrProp ($node, key) {\n\t\tlet value = \"\";\n\t\tif(this.hasAttrOrProp($node,  key)) {\n\t\t\tvalue = this.hasAttr($node, key) ? $node.getAttribute(key): $node[key];\n\t\t}\n\t\treturn value\n\t}\n\t/**\n\t * If a node contains either a property or an attribute\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {String} key\n\t * @return {boolean}\n\t */\n\thasAttrOrProp ($node, key) {\n\t\treturn this.hasAttr($node, key) || this.hasProp($node, key);\n\t}\n\t/**\n\t * If a node has an attribute\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} attr\n\t * @return {boolean}\n\t */\n\thasAttr ($node, attr) {\n\t\tlet hasAttr = false;\n\t\tif($node && !this.isNumeric(attr)) {\n\t\t\tswitch(attr) {\n\t\t\t\tcase \"checked\":\n\t\t\t\t\thasAttr = ($node.type !== undefined && ($node.type === \"radio\" || $node.type === \"checkbox\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\thasAttr = $node.hasAttribute !== undefined ? $node.hasAttribute(attr) : false;\n\t\t\t}\n\t\t}\n\t\treturn hasAttr;\n\t}\n\t/**\n\t * If a node has a property which is not an attribute\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} prop\n\t * @returns {boolean}\n\t */\n\thasProp ($node, prop) {\n\t\tlet hasProp = false;\n\t\tif($node && !this.isNumeric(prop)) {\n\t\t    let has = $node[prop] !== undefined;\n\t\t    if(has && $node[prop] === null && prop === \"value\") {\n\t\t\t\thas = false;\n\t\t\t}\n\t\t\thasProp = (has &&! ($node[prop] instanceof Node)) &&! $node.hasAttribute(prop);\n\t\t}\n\t\treturn hasProp;\n\t}\n\n\t/**\n\t * Set the value of a property which is true/false\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n\t */\n\tsetPropOrAttr ($node, key, value) {\n\t    if(this.hasProp($node, key)) {\n\t    \ttry {\n\t\t\t\t$node[key] = value;\n\t\t\t} catch(ignore) { //If fails, set it as attribute: (e.g. input.list)\n\t\t\t\tthis.setAttr($node, key, value);\n\t\t\t}\n\t    } else {\n\t        this.setAttr($node, key, value);\n    \t}\n\t}\n\n    /**\n     * Set attribute to node. If value is false, will remove it.\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n     */\n\tsetAttr ($node, key, value) {\n        if(value) {\n            $node.setAttribute(key, value);\n        } else {\n            $node.removeAttribute(key);\n        }\n\t}\n\t/**\n\t * Define a property to an object\n\t * @private\n\t * @param {Object} obj\n\t * @param {string} prop\n\t * @param {string} def\n\t */\n\tdefineProp (obj, prop, def) {\n\t\tif(this.isObject(obj)) {\n\t\t\tif(obj[prop] === undefined) {\n\t\t\t\tObject.defineProperty(obj, prop, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: true\n\t\t\t\t});\n\t\t\t\tobj[prop] = def;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Creates a Node using HTML code\n\t * @param {string} html\n\t * @returns {HTMLElement}\n\t */\n\thtmlElement(html) {\n\t\t//return document.createRange().createContextualFragment(html); FIXME\n\t\tconst template = this.newElement(\"template\");\n        template.innerHTML = html.trim();\n        return template.content.firstChild;\n\t};\n\t/**\n\t * Creates a Node with a tag name\n\t * @param {string} tagName\n\t * @returns {HTMLElement}\n\t */\n\tnewElement(tagName) {\n\t    if(!tagName || this.isNumeric(tagName)) {\n\t        tagName = \"invalid\";\n\t    }\n\t\treturn document.createElement(tagName);\n\t};\n\t/**\n\t * Creates an empty node (DocumentFragment)\n\t * @returns {DocumentFragment}\n\t */\n\tnewEmptyNode() {\n\t\treturn new DocumentFragment()\n\t}\n\t/**\n\t * Get all methods of class object\n\t * https://stackoverflow.com/a/67260131/196507\n\t * @param {object} obj\n\t * @returns {Array}\n\t */\n\tgetMethods(obj) {\n\t\tconst o = Reflect.getPrototypeOf(obj);\n\t\tconst x = Reflect.getPrototypeOf(o);\n\t\treturn Reflect.ownKeys(o).filter(it => Reflect.ownKeys(x).indexOf(it) < 0);\n\t};\n\t/**\n\t * Append all child from one node to another\n\t * @param {HTMLElement} $srcNode\n\t * @param {HTMLElement} $tgtNode\n\t */\n\tappendAllChild($srcNode, $tgtNode) {\n\t\t//Update all at once\n\t\t//$node.append(...$outElem.childNodes); //<-- works but it is slower\n\t\twhile ($srcNode.firstChild) {\n\t\t\t$tgtNode.append($srcNode.firstChild);\n\t\t}\n\t}\n\t/**\n\t * Prepend all child from one node to another\n\t * @param {HTMLElement} $srcNode\n\t * @param {HTMLElement} $tgtNode\n\t */\n\tprependAllChild($srcNode, $tgtNode) {\n\t\t//Update all at once\n\t\t//$node.append(...$outElem.childNodes); //<-- works but it is slower\n\t\twhile ($srcNode.firstChild) {\n\t\t\t$tgtNode.prepend($srcNode.firstChild);\n\t\t}\n\t}\n}\n","/**\n * @author: A. Lepe\n * @url : https://gitlab.com/intellisrc/m2d2/\n * @since: May, 2018\n *\n * M2D2 Class\n */\nclass m2d2 {\n    'use strict';\n\t_stored = {\n\t\tevents : [],\n\t\tdatasetNodes : [],\n\t\tdatasets : [],\n\t\tstyleNodes : [],\n\t\tstyles : []\n\t}\n\tstatic storedEventsTimeout = 50; //ms to group same events\n\tstatic short = true; //Enable short assignation (false = better performance) TODO: document (use Proxy like: obj.a = \"text\")\n\tstatic updates = true; //Enable \"onupdate\" (false = better performance) TODO: document (use MutationObserver)\n\tstatic utils = new Utils();\n\n\tconstructor() {\n        // Override some methods to prevent strange behaviour (issue #53):\n       [\"after\",\"before\",\"append\",\"prepend\",\"insertAdjacentElement\",\"replaceWith\"].forEach(p => {\n            Element.prototype[\"_\"+p] = Element.prototype[p];\n            Element.prototype[p] = function(...args) {\n                const arrArgs = Array.from(args);\n                arrArgs.forEach((arg, index) => {\n                    if(arg !== undefined && arg.domNode !== undefined && arg.domNode instanceof Element) { arrArgs[index] = arg.domNode; }\n                })\n                this[\"_\"+p].apply(this, arrArgs);\n            }\n        });\n\t}\n\t//------------------------- STATIC -----------------------------\n\tstatic instance = new m2d2();\n\tstatic extensions = {}; // Additional properties for DOM\n\tstatic main = (() => {\n\t\tconst f = (selector, object) => {\n\t\t\tconst node = this.instance.getProxyNode(selector, object);\n\t\t\t// TEST: 13\n\t\t\tif(node && node.onready && m2d2.utils.isFunction(node.onready)) {\n\t\t\t\tnode.addEventListener(\"ready\", node.onready, { once : true });\n\t\t\t\t// This will be called just after the object has been returned (to be sure it was created)\n\t\t\t\t// Without setTimeout \"onready\" would be the same as \"onload\".\n\t\t\t\tsetTimeout(() => {\n                    node.dispatchEvent(new CustomEvent('ready'));\n\t\t\t\t}, 10); //TODO: Document\n\t\t\t}\n\t\t\t// Store references to datasets (used later in onpudate dataset, style):\n\t\t\t[\"dataset\",\"style\"].forEach(i => {\n\t\t\t    if(node && node[i]) {\n\t\t\t\t    this.instance._stored[i + \"s\"].push(node[i]);\n\t\t\t\t    this.instance._stored[i + \"Nodes\"].push(node);\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn node;\n\t\t}\n\t    // Extends Utils:\n\t    m2d2.utils.getMethods(m2d2.utils).forEach(k => { f[k] = m2d2.utils[k] });\n\t\treturn f;\n\t})();\n\t/**\n\t * Initialization. Use: m2d2.ready()\n\t * @param { function } callback\n\t */\n\tstatic ready(callback) {\n\t\tdocument.addEventListener(\"DOMContentLoaded\", () => {\n            callback(m2d2.main);\n\t\t});\n\t}\n\n\t/**\n\t * Execute something on load. It will search for extensions.\n\t * @param {function} callback\n\t * TEST: 00\n\t */\n\tstatic load(callback) {\n\t    if(callback !== undefined) {\n            const ext = callback(m2d2.main); //main can be extended here\n            if(m2d2.utils.isObject(ext) && !m2d2.utils.isEmpty(ext)) {\n                Object.keys(ext).forEach(k => {\n                    if(m2d2.utils.isValidElement(k)) {\n                        if(m2d2.extensions[k] === undefined) {\n                            m2d2.extensions[k] = {};\n                        }\n                        // Check that we are not replacing any existing property:\n                        const $node = m2d2.utils.newElement(k);\n                        Object.keys(ext[k]).forEach(it => {\n                            if(m2d2.utils.hasProp($node, it)) {\n                                console.log(\"Warning: property [\" + it + \"] already exists \" +\n                                    \"in node: [\" + k + \"] while trying to extend it. \" +\n                                    \"Unexpected behaviour may happen.\");\n                            }\n                        });\n                        Object.assign(m2d2.extensions[k], ext[k]);\n                    } else {\n                        if(m2d2.extensions[\"*\"] === undefined) {\n                            m2d2.extensions[\"*\"] = {};\n                        }\n                        const $node = m2d2.utils.newElement(\"div\");\n                        Object.keys(ext[k]).forEach(it => {\n                            if(m2d2.utils.hasProp($node, it)) {\n                                console.log(\"Warning: property [\" + it + \"] already exists \" +\n                                    \"in Node while trying to extend it. \" +\n                                    \"Unexpected behaviour may happen.\");\n                            }\n                        });\n                        Object.assign(m2d2.extensions[\"*\"], ext[k]);\n                    }\n                });\n            }\n\t\t}\n\t\treturn m2d2.main; //TODO: documentation : const $ = m2d2.load();\n\t}\n\t/**\n\t * M2D2 Will set all extensions to DOM objects //TODO: documentation\n\t * @param {string, HTMLElement} selector\n\t * @param {HTMLElement, Node} [$root]\n\t * @returns {HTMLElement}\n\t * TEST: 01\n\t */\n\textDom(selector, $root) {\n\t\tif(! selector) {  // Do not proceed if selector is null, empty or undefined\n\t\t\tconsole.error(\"Selector was empty\");\n\t\t\treturn null;\n\t\t}\n\t\tif($root === undefined) { $root = document }\n\t\tconst $node = m2d2.utils.isNode(selector) ? selector : $root.querySelector(selector);\n\t\tif(! $node) {\n\t\t\tif(m2d2.utils.isString(selector)) {\n\t\t\t\tconsole.error(\"Selector: \" + selector + \" didn't match any element in node:\");\n\t\t\t\tconsole.log($root);\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Node was null\");\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tif($node._m2d2 === undefined) {\n\t\t\t$node._m2d2 = true; //flag to prevent it from re-assign methods\n\t\t\t[\"parent\",\"sibling\",\"posterior\",\"anterior\",\"find\",\"findAll\",\"onupdate\",\"onready\",\"show\",\"onshow\",\"inView\",\"css\",\"text\",\"html\",\"getData\",\"index\"].forEach(f => {\n\t\t\t\tif($node.hasOwnProperty(f)) {\n\t\t\t\t\tconsole.log(\"Node already had [\"+f+\"] property. It might cause unexpected behaviour.\")\n\t\t\t\t\tconsole.log(\"You may need to update the M2D2 version or report it to: github.com/intellisrc/m2d2/\")\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Properties:\n\t\t\t// TEST: 01, ...\n\t\t\tObject.defineProperty($node, \"text\", {\n\t\t\t\tget() { return this.childNodes.length ? this.innerText : this.textContent; },\n\t\t\t\tset(value) {\n\t\t\t\t\t// text should only change Text nodes and not children: //TODO: documentation\n\t\t\t\t\tif(this.childNodes.length) {\n\t\t\t\t\t\tlet found = false;\n\t\t\t\t\t\tthis.childNodes.forEach(n => {\n\t\t\t\t\t\t\tif(n.constructor.name === \"Text\") {\n\t\t\t\t\t\t\t\tn.nodeValue = value;\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif(! found) {\n\t\t\t\t\t\t\tthis.prepend(document.createTextNode(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.textContent = value\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t// TEST: 43,13,27,...\n\t\t\tObject.defineProperty($node, \"html\", {\n\t\t\t\tget() { return this.innerHTML; },\n\t\t\t\tset(value) { this.innerHTML = value;  }\n\t\t\t});\n\t\t\t// TEST: 02\n\t\t\tObject.defineProperty($node, \"css\", {   //TODO: document new behaviour\n\t\t\t\tget() {\n\t\t\t\t    return this.classList;\n\t\t\t\t},\n\t\t\t\tset(value) {\n\t\t\t\t    if(m2d2.utils.isArray(value)) {\n    \t\t\t\t    this.className = value.join(\" \");\n\t\t\t\t    } else if(m2d2.utils.isString(value)) {\n    \t\t\t\t    this.className = value;\n\t\t\t\t    } else if(m2d2.utils.isPlainObject(value)) {\n\t\t\t\t        Object.keys(value).forEach(c => {\n\t\t\t\t            if(value[c]) {\n\t\t\t\t                this.classList.add(c);\n\t\t\t\t            } else {\n\t\t\t\t                this.classList.remove(c);\n\t\t\t\t            }\n\t\t\t\t        });\n\t\t\t\t    } else {\n\t\t\t\t        console.error(\"Trying to assign a wrong value to css : \" + value);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t});\n\t\t\t// TEST: 16\n\t\t\tObject.defineProperty($node, \"show\", {\n\t\t\t\tget() { //TODO: document\n\t\t\t\t    return m2d2.utils.isVisible(this);\n\t\t\t\t},\n\t\t\t\tset(show) {\n                    const cssDisplay = () => {\n                        return getComputedStyle(this, null).display;\n                    };\n                    const defaultDisplay = () => {\n                        const b = document.getElementsByTagName(\"body\")[0];\n                        const t = document.createElement(\"template\");\n                        const n = document.createElement(this.tagName);\n                        t.append(n);\n                        b.append(t);\n                        const display = getComputedStyle(n, null).display;\n                        t.remove();\n                        return display;\n                    };\n                    if(show) {\n                        if(cssDisplay() === \"none\") {\n                            if(this._m2d2_display) {\n                                this.style.display = this._m2d2_display;\n                            } else {\n                                this.style.removeProperty(\"display\");\n                                if(cssDisplay() === \"none\") {\n                                    const defaultShow = defaultDisplay();\n                                    this.style.display = this.dataset.display || (defaultShow !== \"none\" ? defaultShow : \"block\");\n                                }\n                            }\n                            // TEST: 16\n                            if(this.onshow !== undefined && m2d2.utils.isFunction(this.onshow)) { //TODO: document onshow\n                                this.onshow(this);\n                            }\n                        }\n                    } else {\n                        const stored = this.style.display !== \"none\" ? this.style.display : cssDisplay();\n                        if(stored !== \"none\") {\n                            this._m2d2_display = stored;\n                        }\n                        this.style.display = \"none\"\n                    }\n\t\t\t\t}\n\t\t\t});\n\t\t\t//TODO: document how to extend\n\t\t\t//TODO: test\n\t\t\tlet extend = {};\n\t\t\tif(m2d2.extensions[\"*\"] !== undefined) {\n\t\t\t\tObject.assign(extend, m2d2.extensions[\"*\"]);\n\t\t\t}\n\t\t\tif(m2d2.extensions[$node.tagName] !== undefined) {\n\t\t\t\tObject.assign(extend, m2d2.extensions[$node.tagName]);\n\t\t\t}\n\t\t\t// Functions:\n\t\t\tObject.assign($node, {\n\t\t\t    inView: () => { //TODO: document\n\t\t\t        return m2d2.utils.inView($node);\n\t\t\t    },\n\t\t\t\tposterior: () => { //TEST: 07\n\t\t\t\t    return $node.nextElementSibling;\t\t\t\t},\n\t\t\t\tanterior: () => { //TEST: 07\n                    return $node.previousElementSibling;\n\t\t\t\t},\n\t\t\t\tparent: () => { //TODO: test\n\t\t\t\t\treturn this.extDom($node.parentElement);\n\t\t\t\t},\n\t\t\t\tsibling: (sel) => { //TODO: test\n\t\t\t\t\treturn $node.parentElement.find(sel);\n\t\t\t\t},\n\t\t\t\tfind: (it) => { // Test: 04\n\t\t\t\t\tconst node = $node.querySelector(it)\n\t\t\t\t\treturn node ? this.extDom(node) : null;\n\t\t\t\t},\n\t\t\t\tfindAll: (it) => { //TEST: 05\n\t\t\t\t\tconst nodeList = it === undefined ? Array.from($node.children) : $node.querySelectorAll(it);\n\t\t\t\t\tnodeList.forEach(n => { this.extDom(n) });\n\t\t\t\t\treturn nodeList;\n\t\t\t\t},\n\t\t\t}, extend);\n\t\t\t// Only if the object doesn't have index already (like OPTION)\n\t\t\tif($node.index === undefined) {\n\t\t\t\t$node.index = () => { //TEST: 07\n\t\t\t\t    return Array.from($node.parentNode.children).indexOf($node);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Let attributes know about changes in values //TODO: test\n\t\t\tif([\"INPUT\", \"TEXTAREA\", \"SELECT\"].indexOf($node.tagName) >= 0 && m2d2.utils.hasAttrOrProp($node, \"value\")) {\n\t\t\t\t$node.oninput = function() { this.setAttribute(\"value\", this.value )}\n\t\t\t}\n\t\t\t// Add getData() to form: //TODO: document\n\t\t\tif($node.tagName === \"FORM\") {\n\t\t\t\t$node.getData = function (includeNotVisible) { //TODO document: includeNotVisible\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tconst fd = new FormData(this);\n\t\t\t\t\tconst include = includeNotVisible || false;\n\t\t\t\t\tfor (let pair of fd.entries()) {\n                        const elem = $node.find(\"[name='\"+pair[0]+\"']\");\n\t\t\t\t\t\tif(include || elem.type === \"hidden\" || elem.show) {\n\t\t\t\t\t\t    const name = pair[0];\n\t\t\t\t\t\t    const val = elem.type === \"file\" ? elem.files : pair[1];\n\t\t\t\t\t\t    if(data[name] !== undefined) {\n\t\t\t\t\t\t        if(m2d2.utils.isArray(data[name])) {\n\t\t\t\t\t\t            data[name].push(val);\n\t\t\t\t\t\t        } else {\n\t\t\t\t\t\t\t        data[name] = [data[name], val];\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t    } else {\n\t\t\t\t\t\t\t    data[name] = val;\n\t\t\t\t\t\t\t}\n                        }\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $node;\n\t\t} else {\n\t\t\treturn $node;\n\t\t}\n\t}\n\t/**\n\t * M2D2 will create custom links and properties\n\t * @param {string, HTMLElement, Node} selector\n\t * @param {Object} object\n\t * @returns {HTMLElement, Proxy}\n\t * TEST: 03,...\n\t */\n\tdoDom(selector, object) {\n\t\t// When no selector is specified, set \"body\"\n\t\tif(m2d2.utils.isObject(selector) && object === undefined) {\n\t\t\tobject = selector;\n\t\t\tselector = m2d2.utils.newEmptyNode(); //TODO: document\n\t\t\tif(object.warn === undefined) {\n\t\t\t    object.warn = false;\n\t\t\t}\n\t\t}\n\t\tif(!(m2d2.utils.isString(selector) || m2d2.utils.isElement(selector) || m2d2.utils.isNode(selector))) {\n\t\t\tconsole.error(\"Selector is not a string or a Node:\")\n\t\t\tconsole.log(selector);\n\t\t\treturn null;\n\t\t}\n\t\tif(m2d2.utils.isString(selector) &&! document.querySelector(selector)) {\n\t\t    console.log(\"Selected element doesn't exists: \" + selector)\n\t\t    return null;\n\t\t}\n\t\tconst $node = this.extDom(selector); // Be sure that $node is an extended DOM object\n\t\t// If there is no object return only extension\n\t\tif(object === undefined) { //TODO: documentation: extending nodes\n\t\t\treturn $node;\n\t\t}\n\t\tobject = this.plainToObject($node, object); // Be sure it's an object\n\n\t\t// TEST: 03\n\t\t// We filter-out some known keys:\n\t\tObject.keys(object).filter(it => ! [\"tagName\"].includes(it)).forEach(key => {\n\t\t\tlet origValue = object[key];\n\t\t\tif(origValue === undefined || origValue === null) {\n\t\t\t    console.log(\"Value was not set for key: \" + key + \", 'empty' was used in object: \");\n\t\t\t    console.log(object);\n\t\t\t    console.log(\"In node:\");\n\t\t\t    console.log($node);\n\t\t\t    origValue = \"\";\n\t \t\t}\n            //Look for onupdate inline ([ Node, string ])\n            let value = this.updateValue($node, key, origValue);\n\t\t\t//Look for property first:\n\t\t\tlet isProp = m2d2.utils.hasProp($node, key);\n\t\t\tlet isAttr = m2d2.utils.hasAttr($node, key);\n\t\t\t//Identify if value matches property type:\n\t\t\tlet foundMatch = false;\n\t\t\tif(isAttr || isProp) {\n\t\t\t\t// noinspection FallThroughInSwitchStatementJS\n\t\t\t\tswitch(true) {\n\t\t\t\t\t// Math found:\n\t\t\t\t\tcase key === \"value\" && m2d2.utils.hasProp($node, \"valueAsDate\") && value instanceof Date: // Dates\n\t\t\t\t\t\tkey = \"valueAsDate\"; //renamed value to valueAsDate\n\t\t\t\t\tcase key === \"css\": // css is a Proxy so it fails to verify:\n\t\t\t\t\tcase typeof value === typeof $node[key]: //Same Time\n\t\t\t\t\tcase m2d2.utils.isString($node[key]) && m2d2.utils.isNumeric(value): //Numeric properties\n\t\t\t\t\tcase (m2d2.utils.isFunction(value) && m2d2.utils.isObject($node[key])): //Functions\n\t\t\t\t\tcase m2d2.utils.isBool(value) && m2d2.utils.isString($node[key]): //Boolean\n\t\t\t\t\tcase typeof $node[key] === \"object\" && $node.tagName === \"INPUT\": //Cases like \"list\" in input\n\t\t\t\t\t\tfoundMatch = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Properties and Attributes:\n\t\t\tif(foundMatch) {\n\t\t\t\tlet error = false;\n\t\t\t\tswitch(key) {\n\t\t\t\t\tcase \"classList\": //TODO: test\n\t\t\t\t\t\tif(m2d2.utils.isArray(value)) {\n\t\t\t\t\t\t\tvalue.forEach(v => {\n\t\t\t\t\t\t\t\t$node[key].add(v);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if(m2d2.utils.isString(value)) {\n\t\t\t\t\t\t\t$node[key].add(value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\terror = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"style\": //TODO: test\n\t\t\t\t\tcase \"dataset\": //TODO: as it is already a DOM, we don't need it maybe?\n\t\t\t\t\t\tif(m2d2.utils.isPlainObject(value)) {\n\t\t\t\t\t\t\tObject.keys(value).forEach(k => {\n\t\t\t\t\t\t\t\t$node[key][k] = this.updateValue($node[key], k, value[k]);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\terror = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tswitch(true) {\n\t\t\t\t\t\t\tcase m2d2.utils.isBool(value): // boolean properties\n\t\t\t\t\t\t\tcase m2d2.utils.hasAttrOrProp($node, key):\n                                m2d2.utils.setPropOrAttr($node, key, value);\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t$node[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(error) {\n\t\t\t\t\tconsole.error(\"Invalid value passed to '\" + key + \"': \")\n\t\t\t\t\tconsole.log(value);\n\t\t\t\t\tconsole.log(\"Into Node:\");\n\t\t\t\t\tconsole.log($node);\n\t\t\t\t}\n\t\t\t// Look for elements:\n\t\t\t} else {\n\t\t\t    const options = [];\n\t\t\t    try {\n\t\t\t        // TEST: 03\n\t\t\t        // Functions can not be placed directly into elements, so we skip\n\t\t\t        if(key !== \"template\" &&! m2d2.utils.isFunction(value)) {\n                        //Look for ID:\n                        if(key && key.match(/^\\w/)) {\n                            let elem = $node.find(\"#\" + key);\n                            if(elem && options.indexOf(elem) === -1) { options.push(elem); }\n                            //Look for name:\n                            elem = $node.find(\"[name='\"+key+\"']\");\n                            if(elem && options.indexOf(elem) === -1) { options.push(elem); }\n                            //Look for class:\n                            const elems = Array.from($node.findAll(\".\" + key)).filter(i => options.indexOf(i) < 0)\n                            if(elems.length > 0) { elems.forEach(e => options.push(e)) }\n                        }\n                        //Look for element or free selector (e.g: \"div > span\"):\n                        const elems =  Array.from($node.findAll(key)).filter(i => options.indexOf(i) < 0)\n                        if(elems.length > 0) { elems.forEach(e => options.push(e)) }\n                    }\n\t\t\t\t} catch(e) {\n\t\t\t\t    console.error(\"Invalid selector: \" + key);\n\t\t\t\t    console.log(e);\n\t\t\t\t    return;\n\t\t\t\t}\n\t\t\t\tif(options.length > 1) {\n\t\t\t\t\tconst items = [];\n\t\t\t\t\toptions.forEach(item => {\n\t\t\t\t\t\titems.push(this.render(item, key, value));\n\t\t\t\t\t});\n\t\t\t\t\tthis.linkNode($node, key, items);\n\t\t\t\t\tif(value.warn === undefined || value.warn !== false) { //TODO: document\n\t\t\t\t\t\tconsole.log(\"Multiple elements were assigned with key: [\" + key + \"] under node: \")\n\t\t\t\t\t\tconsole.log($node);\n\t\t\t\t\t\tconsole.log(\"It might be what we expect, but if it is not expected it could result \" +\n\t\t\t\t\t\t\t\t\t\"on some elements mistakenly rendered. You can specify \" +\n\t\t\t\t\t\t\t\t\t\"'warn : false' under that element to hide this message.\") //TODO: add link to reference\n\t\t\t\t\t}\n\t\t\t\t} else if(options.length === 1) { // Found single option: place values\n\t\t\t\t\tconst opt = options[0];\n\t\t\t\t\tif(m2d2.utils.isElement(opt)) { //TODO: test (no template or no items)\n                        const obj = this.plainToObject(opt, value);\n                        const opt_key = m2d2.utils.isPlainObject(obj) && Object.keys(obj).length >= 1 ? Object.keys(obj)[0] : null;\n                        if(opt_key) {\n                            value = this.updateValue(opt, opt_key, origValue);\n                        }\n\t\t\t\t\t\tif(m2d2.utils.isArray(value)) { // Process Array\n\t\t\t\t\t\t\tconst template = object[\"template\"];\n\t\t\t\t\t\t\tthis.doItems(opt, value, template);\n\t\t\t\t\t\t\tthis.linkNode($node, key, opt);\n\t\t\t\t\t\t} else { // Normal Objects:\n\t\t\t\t\t\t\tthis.renderAndLink($node, opt, key, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(\"BUG: It should have been a node but got: \");\n\t\t\t\t\t\tconsole.log(opt);\n\t\t\t\t\t\tconsole.log(\"Parent node:\")\n\t\t\t\t\t\tconsole.log($node);\n\t\t\t\t\t}\n\t\t\t\t} else if(options.length === 0) { //No options found: create nodes\n\t\t\t\t    // Make \"items\" optional: //TODO: document\n\t\t\t\t\tif(key === \"template\" && object[\"items\"] === undefined) {\n\t\t\t\t\t    key = \"items\";\n\t\t\t\t\t    value = [];\n\t\t\t\t\t}\n\t\t\t\t\tconst isFunc = m2d2.utils.isFunction(value);\n\t\t\t\t\tif(value.tagName !== undefined) {\n\t\t\t\t\t\tconst $newNode = this.appendElement($node, value.tagName);\n\t\t\t\t\t\tthis.renderAndLink($node, $newNode, key, value);\n\t\t\t\t\t} else if(m2d2.utils.isValidElement(key) &&! isFunc) {\n\t\t\t\t\t\tconst $newNode = this.appendElement($node, key);\n\t\t\t\t\t\tthis.renderAndLink($node, $newNode, key, value);\n\t\t\t\t\t} else if(key === \"items\") { //Items creation\n\t\t\t\t\t\tconst template = object[\"template\"];\n\t\t\t\t\t\t// Allow use of plain object to specify value -> text //TODO: documentation\n\t\t\t\t\t\tif(m2d2.utils.isPlainObject(value)) {\n\t\t\t\t\t\t    const valTmp = [];\n\t\t\t\t\t\t    Object.keys(value).forEach(o => {\n\t\t\t\t\t\t    \tlet obj;\n\t\t\t\t\t\t    \tif($node.tagName === \"DL\") { //TODO: document DL\n\t\t\t\t\t\t\t\t\tobj = { dt : o, dd : value[o] }\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tobj = { text: value[o] };\n\t\t\t\t\t\t\t\t\tif (m2d2.utils.hasAttrOrProp($node, \"value\")) {\n\t\t\t\t\t\t\t\t\t\tobj.value = o;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tobj.dataset = {id: o};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalTmp.push(obj);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t    value = valTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Process Array:\n\t\t\t\t\t\tif(m2d2.utils.isArray(value)) {\n\t\t\t\t\t\t\tthis.doItems($node, value, template);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(\"Warning: 'items' specified but value is not and array, in element: \");\n\t\t\t\t\t\t\tconsole.log($node);\n\t\t\t\t\t\t\tconsole.log(\"Passed values are: \");\n\t\t\t\t\t\t\tconsole.log(value);\n\t\t\t\t\t\t}\n    \t\t\t\t} else if(isFunc) {\n\t\t\t\t\t\tif(m2d2.updates) {\n\t\t\t\t\t\t    // By using addEventListener we can assign multiple listeners to a single node //TODO: document\n\t\t\t\t\t\t\tif (key === \"onupdate\") {\n\t\t\t\t\t\t\t\t$node.addEventListener(\"update\", value, true); //TODO: document\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$node[key] = value;\n\t\t\t\t\t} else if(key !== \"template\" && (key !== \"warn\" && value !== false)) { //We handle templates inside items\n\t\t\t\t\t\tif(object.warn === undefined || object.warn !== false) { //TODO: document\n\t\t\t\t\t\t\tconsole.error(\"Not sure what you want to do with key: \" + key + \" under element: \");\n\t\t\t\t\t\t\tconsole.log($node);\n\t\t\t\t\t\t\tconsole.log(\"And object:\");\n\t\t\t\t\t\t\tconsole.log(object);\n\t\t\t\t\t\t\tconsole.log(\"Most likely the element's property or child no longer exists or the value\" +\n\t\t\t\t\t\t\t\t\t\t\" passed to it is incorrect.\");\n\t\t\t\t\t\t\tconsole.log(\"You can set 'warn : false' property to the element to dismiss this message.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$node[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// Dispatch onload event (if its not native): //TODO: Document\n\t\tif($node.onload) {\n\t\t    const native = [\"BODY\",\"FRAME\",\"IFRAME\",\"IMG\",\"LINK\",\"SCRIPT\",\"STYLE\"].indexOf($node.tagName) >= 0;\n\t\t    const inputImage = $node.tagName === \"INPUT\" && $node.type === \"image\";\n\t\t    if(! (native || inputImage)) {\n\t\t        // We don't need to add the event as it exists natively and it was assigned during: $node.onload = ...;\n                $node.dispatchEvent(new CustomEvent('load'));\n\t\t    }\n\t\t}\n\t\treturn $node;\n\t}\n\n    /**\n     * Identify if value is an update link (inline onupdate)\n\t * @param {*} value\n     * @returns {boolean}\n     */\n    isUpdateLink(value) {\n        let isLink = false\n        if(m2d2.utils.isArray(value) && (value.length === 2 || value.length === 3)) {\n            const twoArgs = value.length === 2;\n            // First element in array must be Node || DomStringMap (dataset) || CSSStyleDeclaration (style)\n            const acceptedType = m2d2.utils.isNode(value[0]) ||\n                value[0] instanceof DOMStringMap ||\n                value[0] instanceof CSSStyleDeclaration\n            // Second must be 'string' and Third can be a 'function'\n            const otherTypes = twoArgs ? m2d2.utils.isString(value[1]) :\n                          m2d2.utils.isString(value[1]) && m2d2.utils.isFunction(value[2]);\n            // If only two args are in array, add an empty function:\n            isLink = acceptedType && otherTypes;\n            if(isLink && twoArgs) { value.push(v => { return v; }) } //TODO: Document function\n        }\n        return isLink\n    }\n\n    /**\n\t * Convert plain value into object if needed\n\t * @param {HTMLElement, Node} $node\n\t * @param {*} value\n\t */\n    plainToObject($node, value) {\n\t\tif(!m2d2.utils.isPlainObject(value) &&! m2d2.utils.isFunction(value) &&! m2d2.utils.isElement(value)) {\n\t\t\t// When setting values to the node (simplified version):\n\t\t\tif(m2d2.utils.isHtml(value)) {\n\t\t\t\tvalue = { html : value };\n\t\t    } else if(this.isUpdateLink(value)) {\n                const obj  = value[0];\n                const prop = value[1];\n                const callback = value[2];\n\t\t        let tmpVal = this.plainToObject($node, callback(obj[prop]));\n\t\t        if(m2d2.utils.isPlainObject(tmpVal)) {\n\t\t            const newValue = {};\n\t\t            Object.keys(tmpVal).forEach(k => {\n\t\t                newValue[k] = value;\n\t\t            });\n\t\t            value = newValue;\n\t\t        }\n\t\t\t} else if(m2d2.utils.isArray(value)) {\n\t\t\t    value = { items : value };\n\t\t\t} else if(m2d2.utils.hasAttrOrProp($node, \"value\")) {\n\t\t\t\t// If the parent is <select> set also as text to item:\n\t\t\t\tif($node.tagName === \"SELECT\") {\n\t\t\t\t    value = {\n\t\t\t\t        value : value,\n\t\t\t\t        text  : value\n\t\t\t\t    };\n\t\t\t\t} else if($node.tagName === \"BUTTON\") {\n\t\t\t\t    value = { text : value };\n\t\t\t\t} else {\n\t\t\t\t    value = { value : value };\n\t\t\t\t}\n\t\t\t} else if(m2d2.utils.isString(value) && $node.tagName === \"IMG\") {\n\t\t\t    value = { src : value };\n\t\t\t} else if(m2d2.utils.isString(value) || m2d2.utils.isNumeric(value)) {\n\t\t\t\tvalue = { text : value };\n\t\t\t}\n\t\t}\n\t\treturn value;\n    }\n\t/**\n\t * Render and Link a node\n\t * @private\n\t * @param {HTMLElement} $root\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n\t */\n\trenderAndLink($root, $node, key, value) {\n\t\tconst $child = this.render($node, key, value);\n\t\tthis.linkNode($root, key, $child);\n\t}\n\t/**\n\t * Render some value in a node\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n\t * @returns {Proxy, HTMLElement}\n\t */\n\trender($node, key, value) {\n\t    value = this.plainToObject($node, value);\n\t\treturn this.doDom($node, value); // Recursive for each element\n\t}\n\n\t/**\n\t * Links a property to a child node\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {String} key\n\t * @param {HTMLElement} $child\n\t */\n\tlinkNode($node, key, $child) {\n\t\tif($node[key] === $child) {\n\t\t\tconst $proxy = this.proxy($child);\n\t\t\ttry {\n\t\t\t\t$node[key] = $proxy;\n\t\t\t} catch(ignore) {\n\t\t\t\t//NOTE: although it fails when using forms, form is a proxy so it still works.\n\t\t\t}\n\t\t\t$node[\"$\" + key] = $proxy;\n\t\t} else if(m2d2.utils.hasAttrOrProp($node, key)) { // Only if its not an attribute or property, we \"link\" it.\n\t\t\t$node[\"$\" + key] = $child; //Replace name with \"$\" + name\n\t\t\tconsole.log(\"Property : \" + key + \" existed in node: \" + $node.tagName +\n\t\t\t\". Using $\" + key + \" instead for node: \" + $child.tagName + \".\")\n\t\t} else {\n\t\t\t$node[key] = this.proxy($child);\n\t\t}\n\t}\n\t/**\n\t * Creates a dom element inside $node\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} tagName\n\t * @returns {HTMLElement}\n\t */\n\tappendElement ($node, tagName) {\n\t\tconst $newElem = m2d2.utils.newElement(tagName);\n\t\t$node.append($newElem);\n\t\treturn $newElem;\n\t}\n\n    /**\n\t * Get an item to be added\n\t * @param {HTMLElement|null} $node\n\t * @param {number|string} index\n\t * @param {*} obj\n\t * @param {HTMLElement} $template\n\t */\n\tgetItem($node, index, obj, $template) {\n\t    if(!$template) {\n\t\t    $template = this.getTemplate($node);\n\t\t}\n        const $newItem = $template.cloneNode(true);\n\t    // Copy templates to new item:\n\t    this.addTemplatesToItem($template, $newItem);\n        $newItem.dataset.id = index;\n        // Add \"selected\" property\n        this.setUniqueAttrib($newItem, \"selected\"); //TODO: Document\n        // Add template to object //TODO: it might not work with events\n        this.addTemplatesToObjectDeep($template, obj);\n        // Set values and links\n\t\tlet $newNode = this.doDom($newItem, obj);\n\t\t// Place Events:\n\t\treturn this.getItemWithEvents($node, $newNode);\n\t}\n\n    /**\n     * Try to set template to objects deep in tree\n     */\n\taddTemplatesToObjectDeep($template, obj) {\n        if(m2d2.utils.isPlainObject(obj)) {\n            Object.keys(obj).forEach(key => {\n                if($template[key] && $template[key].__template &&! obj.template) {\n                    obj[key].template = $template[key].__template;\n                }\n                if($template[key] && obj[key]) {\n                    this.addTemplatesToObjectDeep($template[key], obj[key]);\n                }\n            });\n        }\n\t}\n\n\t/**\n\t * Reassign templates\n\t * @param {HTMLElement, Node} $template\n\t * @param {HTMLElement, Node} $newNode\n\t * @returns {HTMLElement|Proxy}\n\t // TODO: this does not support deep location of templates\n\t */\n\taddTemplatesToItem($template, $newNode) {\n\t    [\"_template\",\"__template\"].forEach(key => {\n            if($template[key] !== undefined) {\n                $newNode[key] = $template[key];\n            }\n        });\n\t}\n\n\t/**\n\t * Returns a Node with events\n\t * @param {HTMLElement, Node} $node\n\t * @param {HTMLElement, Node} $newNode\n\t * @returns {HTMLElement|Proxy}\n\t //FIXME: I think `this.doDom` could be removed from here and only \"link\" events\n\t */\n\tgetItemWithEvents($node, $newNode) {\n\t\tif($node.__template !== undefined) {\n\t\t\tconst scan = (object, result) => {\n\t\t\t\tresult = result || {};\n\t\t\t\tObject.keys(object).forEach(key=> {\n\t\t\t\t\tif (m2d2.utils.isPlainObject(object[key])) {\n\t\t\t\t\t\tresult[key] = scan(object[key]);\n\t\t\t\t\t} else if(m2d2.utils.isFunction(object[key])) {\n\t\t\t\t\t\tresult[key] = object[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tlet tree = scan($node.__template);\n\t\t\tif(!m2d2.utils.isEmpty(tree)) {\n\t\t\t\ttree = tree[Object.keys(tree)[0]];\n\t\t\t\t$newNode = this.doDom($newNode, tree);\n\t\t\t}\n\t\t}\n\t\treturn $newNode;\n\t}\n\n\t/**\n\t * Process items\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {Array} values\n\t * @param {Object} template\n\t */\n\tdoItems ($node, values, template) {\n\t    // Create the structure for the item:\n\t\tconst $template = this.getTemplate($node, template);\n\t\tif($template === undefined) {\n\t\t\tconsole.error(\"Template not found. Probably an array is being used where it is not expected. Node:\");\n\t\t\tconsole.log($node);\n\t\t\tconsole.log(\"Value (mistaken?):\")\n\t\t\tconsole.log(values);\n\t\t\treturn;\n\t\t}\n\t\t// Fill the template with data:\n\t\tlet i = 0;\n\t\tvalues.forEach(val => {\n\t\t    val = this.plainToObject($node, val);\n\t\t    const $newItem = this.getItem($node, i++, val, $template);\n\t\t    if($newItem) {\n\t\t\t    $node.append($newItem);\n\t\t\t}\n\t\t});\n\t\t// Cleanup\n\t\tconst $temp = $node.find(\"template\");\n\t\tif($temp) { $node.removeChild($temp); }\n\t\t// Set \"items\" link:\n\t\t$node.items = $node.children;\n\t\tthis.extendItems($node);\n\t}\n\t/** Returns an HTMLElement with the structure without events\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {Object, string} [template]\n\t * @returns {HTMLElement}\n\t */\n\tgetTemplate ($node, template) {\n\t\t// If we already have the template, return it:\n\t\tif($node._template !== undefined && $node._template !== \"\") {\n\t\t\treturn $node._template;\n\t\t} else {\n\t\t\tlet $template;\n\t\t\tconst $htmlTemplate = $node.querySelector(\"template\"); // look into HTML under node\n\t\t\tif($htmlTemplate) {\n\t\t\t\t$template = m2d2.utils.htmlElement($htmlTemplate.innerHTML.trim());\n\t\t\t} else {\n                switch ($node.tagName) {\n                    case \"SELECT\":\n                    case \"DATALIST\":\n                        $template = m2d2.utils.newElement(\"option\");\n                        break;\n                    case \"UL\":\n                    case \"OL\":\n                        $template = m2d2.utils.newElement(\"li\");\n                        break;\n                    case \"NAV\":\n                        $template = m2d2.utils.newElement(\"a\");\n                        break;\n                    case \"DL\":\n                        $template = m2d2.utils.newElement(\"dd\");\n                        break;\n                    default:\n                        if(template && m2d2.utils.isPlainObject(template)) {\n                            const children = Object.keys(template).length;\n                            if(children) {\n                                if(children > 1) {\n                                    if(template.tagName !== undefined) { //TODO: document (optional top child when using tagName)\n                                        let wrap = {};\n                                        wrap[template.tagName] = template;\n                                        template = wrap;\n                                    } else {\n                                        console.log(\"Template has more than one top elements. Using the first one. In: \");\n                                        console.log(template);\n                                        console.log(\"Node: \");\n                                        console.log($node);\n                                    }\n                                }\n                                const key = Object.keys(template)[0];\n                                const val = template[key];\n                                if(m2d2.utils.isValidElement(key)) {\n                                    $template = m2d2.utils.newElement(key);\n                                } else if(val.tagName !== undefined) {\n                                    $template = m2d2.utils.newElement(val.tagName);\n\t\t\t\t\t\t\t\t\ttemplate[val.tagName] = val;\n\t\t\t\t\t\t\t\t\tdelete(template[key]);\n                                } else {\n                                    console.error(\"Template defined an element which can not be identified: [\" + key + \"], using <span> in:\");\n                                    console.log(template);\n                                    console.log(\"Node: \");\n                                    console.log($node);\n                                    $template = m2d2.utils.newElement(\"span\");\n                                }\n                            } else {\n                                console.error(\"Template has no definition, and it can not be guessed. Using <span>. Template: \");\n                                console.log(template);\n                                console.log(\"Node: \");\n                                console.log($node);\n                                $template = m2d2.utils.newElement(\"span\");\n                            }\n                        } else {\n                            // If not template is found, use html as of element\n                            if($node.childElementCount > 0) {\n                                $template = m2d2.utils.htmlElement($node.innerHTML.trim());\n                            }\n                        }\n                        break;\n                }\n            }\n\t\t\tif (template) {\n\t\t\t\tif (m2d2.utils.isPlainObject(template)) {\n\t\t\t\t    const $wrap = m2d2.utils.newEmptyNode();\n\t\t\t\t    $wrap.append($template);\n\t\t\t\t\tconst $fragment = this.doDom($wrap, template);\n\t\t\t\t\t$template = $fragment.children[0];\n\t\t\t\t\tm2d2.utils.defineProp($node, \"__template\", template); // This is the original template with events\n\t\t\t\t} else if (m2d2.utils.isHtml(template)) {\n\t\t\t\t\t$template = m2d2.utils.htmlElement(template);\n\t\t\t\t} else if (m2d2.utils.isSelectorID(template)) { //Only IDs are allowed //TODO document\n\t\t\t\t\t$template = m2d2.utils.htmlElement(document.querySelector(template).innerHTML);\n\t\t\t\t} else { //When its just a tag name\n\t\t\t\t\t$template = m2d2.utils.newElement(template);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($template) {\n                if($template.childrenElementCount > 1) {\n                    console.log(\"Templates only supports a single child. Multiple children were detected, wrapping them with <span>. Template:\");\n                    console.log($template);\n                    const $span = m2d2.utils.newElement(\"span\");\n                    $span.append($template);\n                    $template = $span;\n                } else {\n\t\t\t\t    m2d2.utils.defineProp($node, \"_template\", $template); // This is the DOM\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t    console.log(\"Template was not found for element, using <span>:\");\n\t\t\t    console.log($node);\n                const $span = m2d2.utils.newElement(\"span\");\n                $template = $span;\n\t\t\t}\n\t\t\treturn $template;\n\t\t}\n\t}\n\n\t/**\n\t * It will set a unique attribute among a group of nodes (grouped by parent)\n\t * @private\n\t * @param {HTMLElement, Node} $node\n\t * @param {string} key\n\t */\n\tsetUniqueAttrib($node, key) {\n        if(! $node.hasOwnProperty(key)) {\n            Object.defineProperty($node, key, {\n                get : function()    {\n                    return this.hasAttribute(key);\n                },\n                set : function(val) {\n                    const prevSel = this.parentNode ? this.parentNode.find(\"[\"+key+\"]\") : null;\n                    if(prevSel) {\n                        prevSel.removeAttribute(key);\n                    }\n\t\t\t\t\tm2d2.utils.setAttr(this, key, val);\n                }\n            });\n        }\n\t}\n\n    /**\n     * Handle [ Node, string ] values (inline onupdate)\n     * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n     */\n    updateValue($node, key, value) {\n\t\t// TEST: 06\n        if(this.isUpdateLink(value)) {\n\t\t\tconst _this = this;\n            const obj  = value[0];\n            const prop = value[1];\n            const callback = value[2];\n\t\t\tvalue = obj[prop];\n\t\t\tif(obj instanceof CSSStyleDeclaration && this._stored.styles.includes(obj)) {\n\t\t\t\tconst parent = this._stored.styleNodes[this._stored.styles.indexOf(obj)];\n\t\t\t\tif(m2d2.updates) {\n\t\t\t\t\tparent.onupdate = function (ev) {\n\t\t\t\t\t\tif (ev.detail && ev.detail.property === \"style\" && ev.detail.newValue.startsWith(prop + \":\")) {\n\t\t\t\t\t\t\t_this.setShortValue($node, key, callback(this.style[prop]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(obj instanceof DOMStringMap && this._stored.datasets.includes(obj)) {\n\t\t\t\tconst parent = this._stored.datasetNodes[this._stored.datasets.indexOf(obj)];\n\t\t\t\tif(m2d2.updates) {\n\t\t\t\t\tparent.onupdate = (ev) => {\n\t\t\t\t\t\tif (ev.detail && ev.detail.property === \"data-\" + prop) {\n\t\t\t\t\t\t\t_this.setShortValue($node, key, callback(ev.detail.newValue));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(m2d2.updates) {\n\t\t\t\t\tobj.onupdate = (ev) => {\n\t\t\t\t\t\tif (ev.detail && ev.detail.property === prop) {\n\t\t\t\t\t\t\tif (!m2d2.utils.isObject($node[key])) {\n\t\t\t\t\t\t\t\t_this.setShortValue($node, key, callback(ev.detail.newValue));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Place a value either in a property or in a node (short)\n\t * @param $node {Node}\n\t * @param key {string}\n\t * @param value {*}\n\t */\n\tsetShortValue($node, key, value) {\n\t\tif(m2d2.utils.isNode($node[key])) {\n\t\t\tif(m2d2.short) {\n\t\t\t\tconst o = this.plainToObject($node[key], value);\n\t\t\t\tconst k = m2d2.utils.isPlainObject(o) && Object.keys(o).length >= 1 ? Object.keys(o)[0] : null;\n\t\t\t\tif (k) {\n\t\t\t\t\t$node[key][k] = value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Short is disabled. Trying to set a value (\"+value+\") in a node:\")\n\t\t\t\tconsole.log($node[key]);\n\t\t\t\tconsole.log(\"Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'\")\n\t\t\t}\n\t\t} else {\n\t\t\t$node[key] = value\n\t\t}\n\t}\n\n\t/**\n\t * Place a value either in a property or in a node (short)\n\t * @param $node {Node}\n\t * @param key {string}\n\t * @param sample {*} Sample value (to automatically guess property)\n\t * @returns {*} current value\n\t */\n\tgetShortValue($node, key, sample) {\n\t\tlet value = null;\n\t\tif(m2d2.utils.isNode($node[key])) {\n\t\t\tif(m2d2.short) {\n\t\t\t\tconst o = this.plainToObject($node[key], sample || \"\");\n\t\t\t\tconst k = m2d2.utils.isPlainObject(o) && Object.keys(o).length >= 1 ? Object.keys(o)[0] : null;\n\t\t\t\tif (k) {\n\t\t\t\t\tvalue = $node[key][k];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Short is disabled. Trying to get a value from node:\")\n\t\t\t\tconsole.log($node[key]);\n\t\t\t\tconsole.log(\"Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'\")\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = $node[key];\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Basic Proxy to enable assign values to elements\n\t * for example: div.a = \"Click me\" (instead of using: div.a.text)\n\t * NOTE: for reading, \"div.a\" will return a Node and not the value.\n\t * @private\n\t * @param {Object} obj\n\t * @param {boolean} [force] Force to update\n\t * @returns {Proxy, Object}\n\t */\n\tproxy (obj, force) {\n\t    if(!m2d2.short || (obj === null || (obj.domNode !== undefined && force === undefined))) {\n\t        return obj;\n\t    } else {\n\t        obj.domNode = obj;\n            const handler = {\n                get: (target, property) => {\n                    const t = target[property];\n                    switch (true) {\n\t\t\t\t\t\tcase t === null || t === undefined: return null;\n                    \t// Functions should bind target as \"this\"\n\t\t\t\t\t\tcase m2d2.utils.isFunction(t): return t.bind(target);\n\t\t\t\t\t\t// If there was a failed attempt to set proxy, return it on read:\n\t\t\t\t\t\tcase t.domNode && target[\"$\" + property] !== undefined: return target[\"$\" + property];\n\t\t\t\t\t\tcase t.domNode === undefined && m2d2.utils.isElement(t): return this.proxy(t);\n\t\t\t\t\t\tdefault: return t;\n\t\t\t\t\t}\n                },\n                set: (target, property, value) => {\n                    let oldValue = \"\";\n                    if(m2d2.utils.isElement(target[property])) {\n\t\t\t\t\t\toldValue = this.getShortValue(target, property, value);\n\t\t\t\t\t\tthis.setShortValue(target, property, value);\n                    } else if(property === \"onupdate\") {\n                    \tif(m2d2.updates) {\n\t\t\t\t\t\t\tif (m2d2.utils.isFunction(value)) {\n\t\t\t\t\t\t        // By using addEventListener we can assign multiple listeners to a single node\n\t\t\t\t\t\t\t\ttarget.addEventListener(\"update\", value, true);\n\t\t\t\t\t\t\t\toldValue = target[property];\n\t\t\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error(\"Value passed to 'onupdate' is incorrect, in node:\");\n\t\t\t\t\t\t\t\tconsole.log(target);\n\t\t\t\t\t\t\t\tconsole.log(\"Value: (not a function)\");\n\t\t\t\t\t\t\t\tconsole.log(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n                    \t\tconsole.log(\"Updates are not available when `m2d2.updates == false`:\")\n\t\t\t\t\t\t\tconsole.log(target);\n\t\t\t\t\t\t}\n                    } else if(property === \"items\") { //Reset items\n                        target.items.clear();\n                        this.doItems(target, value);\n                    } else {\n                        oldValue = target[property];\n                        value = this.updateValue(target, property, value);\n                        target[property] = value;\n                    }\n\t\t\t\t\t// Check for onupdate //TODO: document\n\t\t\t\t\t// This will observe changes on values\n\t\t\t\t\tif(m2d2.updates && target.onupdate !== undefined) {\n\t\t\t\t\t    if(value !== oldValue) {\n                            target.dispatchEvent(new CustomEvent(\"update\", {\n                                detail: {\n                                    type     : typeof value,\n                                    property : property,\n                                    newValue : value,\n                                    oldValue : oldValue\n                                }\n                            }));\n\t\t\t\t\t    }\n\t\t\t\t\t}\n                    return true;\n                }\n            };\n            return new Proxy(obj, handler);\n\t\t}\n\t}\n\n\t/**\n\t * Function passed to MutationObserver\n\t * @private\n\t * @param {MutationRecord} mutationsList\n\t * @param {MutationObserver} observer\n\t */\n\tonObserve(mutationsList, observer) {\n\t\tmutationsList.forEach(m => {\n\t\t\tconst target = m.target;\n\t\t\t// We store the events to remove immediately repeated events.\n\t\t\t// Forms will link elements which can not be set as proxy so we\n\t\t\t// add a link named `\"$\" + key` but this have the side effect to\n\t\t\t// generate two triggers (one for the element and one for the Proxy).\n\t\t\tif(this._stored.events.indexOf(m) >= 0) { return } else {\n\t\t\t\tthis._stored.events.push(m);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst i = this._stored.events.indexOf(m);\n\t\t\t\t\tif(i >= 0) { this._stored.events.splice(i, 1); }\n\t\t\t\t}, m2d2.storedEventsTimeout); //TODO: this will prevent repeated events to be triggered in less than 50ms : document\n\t\t\t}\n\t\t\t// Check for onupdate //TODO: document\n\t\t\tif(target.onupdate !== undefined) {\n\t\t\t\tif(m.type === \"attributes\") {\n\t\t\t\t\tconst value = m2d2.utils.getAttrOrProp(target, m.attributeName);\n\t\t\t\t\tif(value !== m.oldValue) {\n                        target.dispatchEvent(new CustomEvent(\"update\", {\n                            detail: {\n                                type     : typeof value,\n                                property : m.attributeName,\n                                newValue : value,\n                                oldValue : m.oldValue\n                            }\n                        }));\n                    }\n\t\t\t\t} else if(m.type === \"childList\") { //TODO: improve for other types\n\t\t\t\t    const $child = m.addedNodes[0] || m.removedNodes[0];\n\t\t\t\t\tif($child.nodeName === \"#text\") {\n\t\t\t\t\t\tconst value = m.addedNodes[0].textContent;\n\t\t\t\t\t\tconst oldValue = m.removedNodes.length ? m.removedNodes[0].textContent : null;\n\t\t\t\t\t\tif(value !== oldValue) {\n                            target.dispatchEvent(new CustomEvent(\"update\", {\n                                 detail: {\n                                     type     : typeof value,\n                                     property : \"text\",\n                                     newValue : value,\n                                     oldValue : oldValue\n                                 }\n                             }));\n                         }\n\t\t\t\t\t} else if(target.items !== undefined) { //Items updated\n\t\t\t\t\t    //TODO: Document: in case of items, \"new = added\", \"old = removed\"\n\t\t\t\t\t\tconst value = m.addedNodes;\n\t\t\t\t\t\tconst oldValue = m.removedNodes;\n\t\t\t\t\t\tif(value !== oldValue) {\n                            target.dispatchEvent(new CustomEvent(\"update\", {\n                                 detail: {\n                                     type     : typeof value,\n                                     property : \"items\",\n                                     newValue : value,\n                                     oldValue : oldValue\n                                 }\n                             }));\n                         }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Add MutationObserver to object\n\t * @private\n\t * @param { HTMLElement } $node\n\t */\n\tobserve($node) {\n\t\tif(m2d2.updates) {\n\t\t\tconst mutationObserver = new MutationObserver(this.onObserve.bind(this))\n\t\t\tconst options = {\n\t\t\t\tattributeOldValue: true\n\t\t\t}\n\t\t\toptions.subtree = true;\n\t\t\toptions.childList = true;\n\t\t\tconst toObserve = $node.domNode || $node;\n\t\t\tmutationObserver.observe(toObserve, options);\n\t\t}\n\t}\n\n\t/**\n\t * Get the root node as proxy\n\t * @private\n\t * @param {string|HTMLElement} selector\n\t * @param {Object} obj\n\t */\n\tgetProxyNode(selector, obj) {\n\t\tconst $node = this.doDom(selector, obj);\n\t\tif($node) {\n\t\t    this.observe($node);\n\t\t    return this.proxy($node);\n\t\t}\n\t}\n\n\t/**\n\t * Extends \"items\"\n\t * @private\n\t * @param {NodeList, HTMLCollection} $node\n\t */\n\textendItems($node) {\n\t\t// We try to add most of the array functions into NodeList and HTMLCollection:\n\t\t// NOTE: Not all will work as expected.\n\t\t// NOTE: function() {} is not the same here as () => {} as \"this\" is not as expected\n\t\tfunction reattach(items) {\n\t\t\titems.forEach(itm => {\n\t\t\t\tconst parent = itm.parentNode;\n\t\t\t\tconst detatchedItem = parent.removeChild(itm);\t//We detach from original parent\n\t\t\t\t$node.append(detatchedItem); //Attach to $node (works with non-existing elements)\n\t\t\t});\n\t\t}\n\t\tconst items = $node.items;\n\t\t// Non-Standard or non-existent in Array:\n\t\tconst nonStd = [\"clear\", \"get\", \"remove\", \"selected\", \"first\", \"last\", \"findAll\"];\n\t\t// Array properties:\n\t\tObject.getOwnPropertyNames(Array.prototype).concat(nonStd).forEach(method => {\n\t\t\tif(items[method] === undefined) {\n\t\t\t\tlet func = null;\n\t\t\t\tconst _this = this;\n\t\t\t\tswitch (method) {\n\t\t\t\t    //-------------------- Same as in Array --------------------------\n\t\t\t\t\tcase \"copyWithin\": // copy element from index to index\n\t\t\t\t\tcase \"fill\": // replace N elements in array\n\t\t\t\t\tcase \"splice\": // add or remove elements\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        console.log(\"Not available yet: \" + method);\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"reverse\": // reverse the order\n\t\t\t\t\t\tfunc = function(...args) {\n\t\t\t\t\t        if(this.items.length) {\n                                const items = Array.from(this.items); //Keep a copy\n                                const retObj = items[method](...args);\n                                reattach(items);\n                                return retObj;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t//--------------------- Special Implementation --------------------\n\t\t\t\t\tcase \"clear\": // parentNode.replaceChildren() can also be used\n\t\t\t\t\t\tfunc = function() {\n\t\t\t\t\t\t\twhile(this.items[0]) this.items[0].remove()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get\": // will return the item with data-id:\n\t\t\t\t\t    func = function(id) {\n\t\t\t\t\t        let found = null;\n\t\t\t\t\t        if(this.items.length) {\n\t\t\t\t\t            this.items.some(item => {\n\t\t\t\t\t                const sameId = m2d2.utils.isNumeric(id) ? (item.dataset.id * 1) === id * 1 : item.dataset.id === id;\n\t\t\t\t\t                if(item.dataset && sameId) {\n\t\t\t\t\t                    found = item;\n\t\t\t\t\t                    return true;\n\t\t\t\t\t                }\n\t\t\t\t\t            });\n\t\t\t\t\t        }\n\t\t\t\t\t        return found;\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"selected\": // will return the selected item in list\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        return _this.proxy(this.find(\":scope > \" + \"[selected]\")); //only direct children\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"first\": // returns the first item in list\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        return _this.proxy(this.items[0]);\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"last\": // returns the last item in list\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        return _this.proxy(this.items[this.items.length - 1]);\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"pop\" : //Remove and return last element:\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        if(this.items.length) {\n                                const parent = this[0].parentNode;\n                                return _this.proxy(parent.removeChild(this.items[this.items.length - 1]));\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"push\": // Add one item at the end:\n\t\t\t\t\t\tfunc = function(obj) {\n\t\t\t\t\t\t    obj = _this.plainToObject(this, obj);\n\t\t\t\t\t\t\tif(m2d2.utils.isElement(obj)) {\n\t\t\t\t\t\t\t\tthis.append(obj);\n\t\t\t\t\t\t\t} else if (m2d2.utils.isPlainObject(obj)) {\n\t\t\t\t\t\t\t    const index = this.items.length;\n\t\t\t\t\t\t\t    const $child = _this.getItem(this, index, obj);\n\t\t\t\t\t\t\t    this.appendChild($child);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t    console.log(\"Trying to push an unknown value into a list:\");\n\t\t\t\t\t\t\t    console.log(obj)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"remove\": // will return the item with data-id:\n\t\t\t\t\t    func = function(id) {\n\t\t\t\t\t        if(this.items.length) {\n\t\t\t\t\t            const elem = this.items.get(id);\n\t\t\t\t\t            if(elem.length === 1) {\n\t\t\t\t\t                elem.remove();\n\t\t\t\t\t            }\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"shift\": // remove and return first item:\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        if(this.items.length) {\n                                const parent = this.items[0].parentNode;\n                                return _this.proxy(parent.removeChild(this.items[0]));\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"sort\": // You can pass a function to compare items:\n\t\t\t\t\t\tfunc = function(compareFunc) {\n\t\t\t\t\t        if(this.items.length) {\n                                const items = Array.from(this.items); //Keep copy\n                                items.sort(compareFunc || ((a, b) => {\n                                    return a.text.localeCompare(b.text);\n                                }));\n                                reattach(items);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"unshift\": // Add an item to the beginning\n\t\t\t\t\t\tfunc = function(obj) {\n\t\t\t\t\t\t    obj = _this.plainToObject(this, obj);\n\t\t\t\t\t\t\tif(m2d2.utils.isElement(obj)) {\n\t\t\t\t\t\t\t\tthis.prepend(obj);\n\t\t\t\t\t\t    } else if (m2d2.utils.isPlainObject(obj)) {\n\t\t\t\t\t\t\t    const index = this.items.length;\n\t\t\t\t\t\t\t    const $child = _this.getItem(this, index, obj);\n\t\t\t\t\t\t\t    this.prepend($child);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t    console.log(\"Trying to unshift an unknown value into a list:\");\n\t\t\t\t\t\t\t    console.log(obj)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t    break;\n\t\t\t\t\tdefault: //----------------- Link to Array -------------------\n\t\t\t\t\t    let arrMethod = method;\n\t\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\n\t\t\t\t\t\tswitch(true) {\n\t\t\t\t\t        case method === \"findAll\":\n\t\t\t\t\t            arrMethod = \"filter\"; // Use \"filter\"\n                            case m2d2.utils.isFunction(Array.prototype[method]):\n                                // Convert nodes to proxy so we can use short assignment\n                                // at, concat, every, filter, find, findIndex, forEach, includes, indexOf, join,\n                                // keys, lastIndexOf, map, reduce, reduceRight, slice, some, values\n                                const arrFunc = function (...args) {\n                                    const proxies = [];\n                                    Array.from($node.items).forEach(n => {\n                                        proxies.push(_this.proxy(n));\n                                    });\n                                    return Array.from(proxies)[arrMethod](...args);\n                                }\n                                switch(method) {\n                                    // Change behaviour of find: //TODO: documentation\n                                    case \"find\":\n                                        func = function(...args) {\n                                            if(m2d2.utils.isString(args[0])) {\n                                                return this.find(args[0]);\n                                            } else {\n                                                return arrFunc(...args);\n                                            }\n                                        }\n                                        break\n                                    case \"findAll\":  //TODO: documentation\n                                        func = function(...args) {\n                                            if(args.length === 0) {\n                                                return this.findAll();\n                                            } else if(m2d2.utils.isString(args[0])) {\n                                                return this.findAll(args[0]);\n                                            } else {\n                                                return arrFunc(...args);\n                                            }\n                                        }\n                                        break\n                                    case \"concat\": //TODO: documentation\n                                        func = function(...args) {\n                                            for(let i = 0; i < args.length; i++) {\n                                                if(m2d2.utils.isArray(args[i])) {\n                                                    for(let j = 0; j < args[i].length; j++) {\n                                                        let obj = args[i][j];\n\t\t\t\t\t\t\t                            if(! m2d2.utils.isElement(obj)) {\n                                                            obj = _this.plainToObject(this, args[i][j]);\n                                                            if (m2d2.utils.isPlainObject(obj)) {\n\t\t\t\t\t\t\t                                    const index = this.items.length;\n                                                                obj = _this.getItem(this, index, obj);\n                                                            }\n                                                        }\n                                                        this.items.push(obj);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        break\n                                    default:\n                                        func = arrFunc;\n                                        break\n                                }\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(func) {\n\t\t\t\t\tm2d2.utils.defineProp(items, method, func.bind($node)); //bind: specify the \"this\" value\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}"]}