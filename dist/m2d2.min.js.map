{"version":3,"sources":["m2d2.min.js","utils.src.js","m2d2.src.js"],"names":["root","factory","_stored","define","events","datasetNodes","exports","module","m2d2","this","Utils","isString","t","isBool","isNumeric","isNaN","parseFloat","isFinite","isSelectorID","trim","indexOf","isPlainObject","constructor","name","isObject","isArray","Array","isFunction","isElement","HTMLElement","isNode","Node","DocumentFragment","isHtml","isEmpty","Object","keys","length","isVisible","console","log","e","style","display","r","visibility","inView","getBoundingClientRect","top","left","bottom","window","innerHeight","document","documentElement","clientHeight","right","innerWidth","clientWidth","width","height","cleanArray","filter","isValidElement","newElement","exists","querySelector","getAttrOrProp","hasAttrOrProp","hasAttr","getAttribute","hasProp","type","hasAttribute","i","setPropOrAttr","setAttr","setAttribute","removeAttribute","defineProp","defineProperty","enumerable","writable","htmlElement","innerHTML","content","firstChild","createElement","newEmptyNode","getMethods","Reflect","getPrototypeOf","ownKeys","appendAllChild","append","prependAllChild","prepend","datasets","styleNodes","styles","static","forEach","Element","prototype","s","from","domNode","apply","instance","getProxyNode","onready","utils","addEventListener","once","setTimeout","dispatchEvent","CustomEvent","push","main","extensions","assign","extDom","error","_m2d2","hasOwnProperty","get","childNodes","innerText","textContent","set","nodeValue","createTextNode","classList","className","join","add","remove","getComputedStyle","getElementsByTagName","tagName","_m2d2_display","removeProperty","dataset","onshow","posterior","nextElementSibling","anterior","previousElementSibling","parent","parentElement","sibling","find","findAll","children","querySelectorAll","index","parentNode","oninput","value","getData","FormData","n","entries","show","files","doDom","warn","plainToObject","includes","updateValue","o","l","Date","match","render","linkNode","a","template","doItems","renderAndLink","items","appendElement","dt","dd","text","id","updates","onload","isUpdateLink","DOMStringMap","CSSStyleDeclaration","html","src","proxy","getItem","getTemplate","cloneNode","addTemplatesToItem","setUniqueAttrib","addTemplatesToObjectDeep","getItemWithEvents","__template","removeChild","extendItems","_template","childElementCount","childrenElementCount","onupdate","detail","property","newValue","startsWith","setShortValue","short","getShortValue","Proxy","bind","clear","oldValue","onObserve","target","splice","storedEventsTimeout","attributeName","addedNodes","removedNodes","nodeName","observe","MutationObserver","attributeOldValue","subtree","childList","getOwnPropertyNames","concat","some","appendChild","sort","localeCompare"],"mappings":"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","file":"m2d2.min.js","sourcesContent":["!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?module.exports=t():e.m2d2=t()}(this,(function(){\"use strict\";class e{isString(e){return\"string\"==typeof e}isBool(e){return\"boolean\"==typeof e}isNumeric(e){return!isNaN(parseFloat(e))&&isFinite(e)}isSelectorID(e){return 0===(e+\"\").trim().indexOf(\"#\")}isPlainObject(e){return\"Object\"===e.constructor.name}isObject(e){return\"object\"==typeof e}isArray(e){return Array.isArray(e)}isFunction(e){return\"function\"==typeof e}isElement(e){return e instanceof HTMLElement}isNode(e){return e instanceof Node||e instanceof DocumentFragment}isHtml(e){return-1!==(e+\"\").trim().indexOf(\"<\")}isEmpty(e){return void 0===e||this.isObject(e)&&0===Object.keys(e).length||\"\"===e}isVisible(e){if(!this.isElement(e))return console.log(\"(isVisible) Not an element: \"),console.log(e),!1;const t=\"none\"!==e.style.display,s=\"hidden\"!==e.style.visibility;return t&&s}inView(e){const t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)&&t.width>0&&t.height>0}cleanArray(e){return e.filter((function(e){return 0===e||e}))}isValidElement(e){const t=this.newElement(e);return\"template\"!==e&&\"HTMLUnknownElement\"!==t.constructor.name}exists(e){return null!==document.querySelector(e)}getAttrOrProp(e,t){let s=\"\";return this.hasAttrOrProp(e,t)&&(s=this.hasAttr(e,t)?e.getAttribute(t):e[t]),s}hasAttrOrProp(e,t){return this.hasAttr(e,t)||this.hasProp(e,t)}hasAttr(e,t){let s=!1;return e&&!this.isNumeric(t)&&(s=\"checked\"===t?void 0!==e.type&&(\"radio\"===e.type||\"checkbox\"===e.type):void 0!==e.hasAttribute&&e.hasAttribute(t)),s}hasProp(e,t){let s=!1;if(e&&!this.isNumeric(t)){let i=void 0!==e[t];i&&null===e[t]&&\"value\"===t&&(i=!1),s=i&&!(e[t]instanceof Node)&&!e.hasAttribute(t)}return s}setPropOrAttr(e,t,s){if(this.hasProp(e,t))try{e[t]=s}catch(i){this.setAttr(e,t,s)}else this.setAttr(e,t,s)}setAttr(e,t,s){s?e.setAttribute(t,s):e.removeAttribute(t)}defineProp(e,t,s){this.isObject(e)&&void 0===e[t]&&(Object.defineProperty(e,t,{enumerable:!1,writable:!0}),e[t]=s)}htmlElement(e){const t=this.newElement(\"template\");return t.innerHTML=e.trim(),t.content.firstChild}newElement(e){return e&&!this.isNumeric(e)||(e=\"invalid\"),document.createElement(e)}newEmptyNode(){return new DocumentFragment}getMethods(e){const t=Reflect.getPrototypeOf(e),s=Reflect.getPrototypeOf(t);return Reflect.ownKeys(t).filter((e=>Reflect.ownKeys(s).indexOf(e)<0))}appendAllChild(e,t){for(;e.firstChild;)t.append(e.firstChild)}prependAllChild(e,t){for(;e.firstChild;)t.prepend(e.firstChild)}}class t{\"use strict\";_stored={events:[],datasetNodes:[],datasets:[],styleNodes:[],styles:[]};static storedEventsTimeout=50;static short=!0;static updates=!0;static utils=new e;constructor(){[\"after\",\"before\",\"append\",\"prepend\",\"insertAdjacentElement\",\"replaceWith\"].forEach((e=>{Element.prototype[\"_\"+e]=Element.prototype[e],Element.prototype[e]=function(...t){const s=Array.from(t);s.forEach(((e,t)=>{void 0!==e&&void 0!==e.domNode&&e.domNode instanceof Element&&(s[t]=e.domNode)})),this[\"_\"+e].apply(this,s)}}))}static instance=new t;static extensions={};static main=(()=>{const e=(e,s)=>{const i=this.instance.getProxyNode(e,s);return i&&i.onready&&t.utils.isFunction(i.onready)&&(i.addEventListener(\"ready\",i.onready,{once:!0}),setTimeout((()=>{i.dispatchEvent(new CustomEvent(\"ready\"))}),10)),[\"dataset\",\"style\"].forEach((e=>{i&&i[e]&&(this.instance._stored[e+\"s\"].push(i[e]),this.instance._stored[e+\"Nodes\"].push(i))})),i};return t.utils.getMethods(t.utils).forEach((s=>{e[s]=t.utils[s]})),e})();static ready(e){document.addEventListener(\"DOMContentLoaded\",(()=>{e(t.main)}))}static load(e){if(void 0!==e){const s=e(t.main);t.utils.isObject(s)&&!t.utils.isEmpty(s)&&Object.keys(s).forEach((e=>{if(t.utils.isValidElement(e)){void 0===t.extensions[e]&&(t.extensions[e]={});const i=t.utils.newElement(e);Object.keys(s[e]).forEach((s=>{t.utils.hasProp(i,s)&&console.log(\"Warning: property [\"+s+\"] already exists in node: [\"+e+\"] while trying to extend it. Unexpected behaviour may happen.\")})),Object.assign(t.extensions[e],s[e])}else{void 0===t.extensions[\"*\"]&&(t.extensions[\"*\"]={});const i=t.utils.newElement(\"div\");Object.keys(s[e]).forEach((e=>{t.utils.hasProp(i,e)&&console.log(\"Warning: property [\"+e+\"] already exists in Node while trying to extend it. Unexpected behaviour may happen.\")})),Object.assign(t.extensions[\"*\"],s[e])}}))}return t.main}extDom(e,s){if(!e)return console.error(\"Selector was empty\"),null;void 0===s&&(s=document);const i=t.utils.isNode(e)?e:s.querySelector(e);if(!i)return t.utils.isString(e)?(console.error(\"Selector: \"+e+\" didn't match any element in node:\"),console.log(s)):console.error(\"Node was null\"),null;if(void 0===i._m2d2){i._m2d2=!0,[\"parent\",\"sibling\",\"posterior\",\"anterior\",\"find\",\"findAll\",\"onupdate\",\"onready\",\"show\",\"onshow\",\"inView\",\"css\",\"text\",\"html\",\"getData\",\"index\"].forEach((e=>{i.hasOwnProperty(e)&&(console.log(\"Node already had [\"+e+\"] property. It might cause unexpected behaviour.\"),console.log(\"You may need to update the M2D2 version or report it to: github.com/intellisrc/m2d2/\"))})),Object.defineProperty(i,\"text\",{get(){return this.childNodes.length?this.innerText:this.textContent},set(e){if(this.childNodes.length){let t=!1;this.childNodes.forEach((s=>{\"Text\"===s.constructor.name&&(s.nodeValue=e,t=!0)})),t||this.prepend(document.createTextNode(e))}else this.textContent=e}}),Object.defineProperty(i,\"html\",{get(){return this.innerHTML},set(e){this.innerHTML=e}}),Object.defineProperty(i,\"css\",{get(){return this.classList},set(e){t.utils.isArray(e)?this.className=e.join(\" \"):t.utils.isString(e)?this.className=e:t.utils.isPlainObject(e)?Object.keys(e).forEach((t=>{e[t]?this.classList.add(t):this.classList.remove(t)})):console.error(\"Trying to assign a wrong value to css : \"+e)}}),Object.defineProperty(i,\"show\",{get(){return t.utils.isVisible(this)},set(e){const s=()=>getComputedStyle(this,null).display,i=()=>{const e=document.getElementsByTagName(\"body\")[0],t=document.createElement(\"template\"),s=document.createElement(this.tagName);t.append(s),e.append(t);const i=getComputedStyle(s,null).display;return t.remove(),i};if(e){if(\"none\"===s()){if(this._m2d2_display)this.style.display=this._m2d2_display;else if(this.style.removeProperty(\"display\"),\"none\"===s()){const e=i();this.style.display=this.dataset.display||(\"none\"!==e?e:\"block\")}void 0!==this.onshow&&t.utils.isFunction(this.onshow)&&this.onshow(this)}}else{const e=\"none\"!==this.style.display?this.style.display:s();\"none\"!==e&&(this._m2d2_display=e),this.style.display=\"none\"}}});let e={};return void 0!==t.extensions[\"*\"]&&Object.assign(e,t.extensions[\"*\"]),void 0!==t.extensions[i.tagName]&&Object.assign(e,t.extensions[i.tagName]),Object.assign(i,{inView:()=>t.utils.inView(i),posterior:()=>i.nextElementSibling,anterior:()=>i.previousElementSibling,parent:()=>this.extDom(i.parentElement),sibling:e=>i.parentElement.find(e),find:e=>{const t=i.querySelector(e);return t?this.extDom(t):null},findAll:e=>{const t=void 0===e?Array.from(i.children):i.querySelectorAll(e);return t.forEach((e=>{this.extDom(e)})),t}},e),void 0===i.index&&(i.index=()=>Array.from(i.parentNode.children).indexOf(i)),[\"INPUT\",\"TEXTAREA\",\"SELECT\"].indexOf(i.tagName)>=0&&t.utils.hasAttrOrProp(i,\"value\")&&(i.oninput=function(){this.setAttribute(\"value\",this.value)}),\"FORM\"===i.tagName&&(i.getData=function(e){const s={},n=new FormData(this),o=e||!1;for(let e of n.entries()){const n=i.find(\"[name='\"+e[0]+\"']\");if(o||\"hidden\"===n.type||n.show){const i=e[0],o=\"file\"===n.type?n.files:e[1];void 0!==s[i]?t.utils.isArray(s[i])?s[i].push(o):s[i]=[s[i],o]:s[i]=o}}return s}),i}return i}doDom(e,s){if(t.utils.isObject(e)&&void 0===s&&(s=e,e=t.utils.newEmptyNode(),void 0===s.warn&&(s.warn=!1)),!(t.utils.isString(e)||t.utils.isElement(e)||t.utils.isNode(e)))return console.error(\"Selector is not a string or a Node:\"),console.log(e),null;if(t.utils.isString(e)&&!document.querySelector(e))return console.log(\"Selected element doesn't exists: \"+e),null;const i=this.extDom(e);if(void 0===s)return i;if(s=this.plainToObject(i,s),Object.keys(s).filter((e=>![\"tagName\"].includes(e))).forEach((e=>{let n=s[e];null==n&&(console.log(\"Value was not set for key: \"+e+\", 'empty' was used in object: \"),console.log(s),console.log(\"In node:\"),console.log(i),n=\"\");let o=this.updateValue(i,e,n),l=t.utils.hasProp(i,e),r=!1;if(t.utils.hasAttr(i,e)||l)switch(!0){case\"value\"===e&&t.utils.hasProp(i,\"valueAsDate\")&&o instanceof Date:e=\"valueAsDate\";case\"css\"===e:case typeof o==typeof i[e]:case t.utils.isString(i[e])&&t.utils.isNumeric(o):case t.utils.isFunction(o)&&t.utils.isObject(i[e]):case t.utils.isBool(o)&&t.utils.isString(i[e]):case\"object\"==typeof i[e]&&\"INPUT\"===i.tagName:r=!0}if(r){let s=!1;switch(e){case\"classList\":t.utils.isArray(o)?o.forEach((t=>{i[e].add(t)})):t.utils.isString(o)?i[e].add(o):s=!0;break;case\"style\":case\"dataset\":t.utils.isPlainObject(o)?Object.keys(o).forEach((t=>{i[e][t]=this.updateValue(i[e],t,o[t])})):s=!0;break;default:switch(!0){case t.utils.isBool(o):case t.utils.hasAttrOrProp(i,e):t.utils.setPropOrAttr(i,e,o);break;default:i[e]=o}}s&&(console.error(\"Invalid value passed to '\"+e+\"': \"),console.log(o),console.log(\"Into Node:\"),console.log(i))}else{const l=[];try{if(\"template\"!==e&&!t.utils.isFunction(o)){if(e&&e.match(/^\\w/)){let t=i.find(\"#\"+e);t&&-1===l.indexOf(t)&&l.push(t),t=i.find(\"[name='\"+e+\"']\"),t&&-1===l.indexOf(t)&&l.push(t);const s=Array.from(i.findAll(\".\"+e)).filter((e=>l.indexOf(e)<0));s.length>0&&s.forEach((e=>l.push(e)))}const t=Array.from(i.findAll(e)).filter((e=>l.indexOf(e)<0));t.length>0&&t.forEach((e=>l.push(e)))}}catch(t){return console.error(\"Invalid selector: \"+e),void console.log(t)}if(l.length>1){const t=[];l.forEach((s=>{t.push(this.render(s,e,o))})),this.linkNode(i,e,t),void 0!==o.warn&&!1===o.warn||(console.log(\"Multiple elements were assigned with key: [\"+e+\"] under node: \"),console.log(i),console.log(\"It might be what we expect, but if it is not expected it could result on some elements mistakenly rendered. You can specify 'warn : false' under that element to hide this message.\"))}else if(1===l.length){const r=l[0];if(t.utils.isElement(r)){const l=this.plainToObject(r,o),a=t.utils.isPlainObject(l)&&Object.keys(l).length>=1?Object.keys(l)[0]:null;if(a&&(o=this.updateValue(r,a,n)),t.utils.isArray(o)){const t=s.template;this.doItems(r,o,t),this.linkNode(i,e,r)}else this.renderAndLink(i,r,e,o)}else console.error(\"BUG: It should have been a node but got: \"),console.log(r),console.log(\"Parent node:\"),console.log(i)}else if(0===l.length){\"template\"===e&&void 0===s.items&&(e=\"items\",o=[]);const n=t.utils.isFunction(o);if(void 0!==o.tagName){const t=this.appendElement(i,o.tagName);this.renderAndLink(i,t,e,o)}else if(t.utils.isValidElement(e)&&!n){const t=this.appendElement(i,e);this.renderAndLink(i,t,e,o)}else if(\"items\"===e){const e=s.template;if(t.utils.isPlainObject(o)){const e=[];Object.keys(o).forEach((s=>{let n;\"DL\"===i.tagName?n={dt:s,dd:o[s]}:(n={text:o[s]},t.utils.hasAttrOrProp(i,\"value\")?n.value=s:n.dataset={id:s}),e.push(n)})),o=e}t.utils.isArray(o)?this.doItems(i,o,e):(console.log(\"Warning: 'items' specified but value is not and array, in element: \"),console.log(i),console.log(\"Passed values are: \"),console.log(o))}else n?(t.updates&&\"onupdate\"===e&&i.addEventListener(\"update\",o,!0),i[e]=o):\"template\"!==e&&\"warn\"!==e&&!1!==o&&(void 0!==s.warn&&!1===s.warn||(console.error(\"Not sure what you want to do with key: \"+e+\" under element: \"),console.log(i),console.log(\"And object:\"),console.log(s),console.log(\"Most likely the element's property or child no longer exists or the value passed to it is incorrect.\"),console.log(\"You can set 'warn : false' property to the element to dismiss this message.\")),i[e]=o)}}})),i.onload){const e=[\"BODY\",\"FRAME\",\"IFRAME\",\"IMG\",\"LINK\",\"SCRIPT\",\"STYLE\"].indexOf(i.tagName)>=0,t=\"INPUT\"===i.tagName&&\"image\"===i.type;e||t||i.dispatchEvent(new CustomEvent(\"load\"))}return i}isUpdateLink(e){let s=!1;if(t.utils.isArray(e)&&(2===e.length||3===e.length)){const i=2===e.length,n=t.utils.isNode(e[0])||e[0]instanceof DOMStringMap||e[0]instanceof CSSStyleDeclaration,o=i?t.utils.isString(e[1]):t.utils.isString(e[1])&&t.utils.isFunction(e[2]);s=n&&o,s&&i&&e.push((e=>e))}return s}plainToObject(e,s){if(!t.utils.isPlainObject(s)&&!t.utils.isFunction(s)&&!t.utils.isElement(s))if(t.utils.isHtml(s))s={html:s};else if(this.isUpdateLink(s)){const i=s[0],n=s[1],o=s[2];let l=this.plainToObject(e,o(i[n]));if(t.utils.isPlainObject(l)){const e={};Object.keys(l).forEach((t=>{e[t]=s})),s=e}}else t.utils.isArray(s)?s={items:s}:t.utils.hasAttrOrProp(e,\"value\")?s=\"SELECT\"===e.tagName?{value:s,text:s}:\"BUTTON\"===e.tagName?{text:s}:{value:s}:t.utils.isString(s)&&\"IMG\"===e.tagName?s={src:s}:(t.utils.isString(s)||t.utils.isNumeric(s))&&(s={text:s});return s}renderAndLink(e,t,s,i){const n=this.render(t,s,i);this.linkNode(e,s,n)}render(e,t,s){return s=this.plainToObject(e,s),this.doDom(e,s)}linkNode(e,s,i){if(e[s]===i){const t=this.proxy(i);try{e[s]=t}catch(e){}e[\"$\"+s]=t}else t.utils.hasAttrOrProp(e,s)?(e[\"$\"+s]=i,console.log(\"Property : \"+s+\" existed in node: \"+e.tagName+\". Using $\"+s+\" instead for node: \"+i.tagName+\".\")):e[s]=this.proxy(i)}appendElement(e,s){const i=t.utils.newElement(s);return e.append(i),i}getItem(e,t,s,i){i||(i=this.getTemplate(e));const n=i.cloneNode(!0);this.addTemplatesToItem(i,n),n.dataset.id=t,this.setUniqueAttrib(n,\"selected\"),this.addTemplatesToObjectDeep(i,s);let o=this.doDom(n,s);return this.getItemWithEvents(e,o)}addTemplatesToObjectDeep(e,s){t.utils.isPlainObject(s)&&Object.keys(s).forEach((t=>{e[t]&&e[t].__template&&!s.template&&(s[t].template=e[t].__template),e[t]&&s[t]&&this.addTemplatesToObjectDeep(e[t],s[t])}))}addTemplatesToItem(e,t){[\"_template\",\"__template\"].forEach((s=>{void 0!==e[s]&&(t[s]=e[s])}))}getItemWithEvents(e,s){if(void 0!==e.__template){const i=(e,s)=>(s=s||{},Object.keys(e).forEach((n=>{t.utils.isPlainObject(e[n])?s[n]=i(e[n]):t.utils.isFunction(e[n])&&(s[n]=e[n])})),s);let n=i(e.__template);t.utils.isEmpty(n)||(n=n[Object.keys(n)[0]],s=this.doDom(s,n))}return s}doItems(e,t,s){const i=this.getTemplate(e,s);if(void 0===i)return console.error(\"Template not found. Probably an array is being used where it is not expected. Node:\"),console.log(e),console.log(\"Value (mistaken?):\"),void console.log(t);let n=0;t.forEach((t=>{t=this.plainToObject(e,t);const s=this.getItem(e,n++,t,i);s&&e.append(s)}));const o=e.find(\"template\");o&&e.removeChild(o),e.items=e.children,this.extendItems(e)}getTemplate(e,s){if(void 0!==e._template&&\"\"!==e._template)return e._template;{let i;const n=e.querySelector(\"template\");if(n)i=t.utils.htmlElement(n.innerHTML.trim());else switch(e.tagName){case\"SELECT\":case\"DATALIST\":i=t.utils.newElement(\"option\");break;case\"UL\":case\"OL\":i=t.utils.newElement(\"li\");break;case\"NAV\":i=t.utils.newElement(\"a\");break;case\"DL\":i=t.utils.newElement(\"dd\");break;default:if(s&&t.utils.isPlainObject(s)){const n=Object.keys(s).length;if(n){if(n>1)if(void 0!==s.tagName){let e={};e[s.tagName]=s,s=e}else console.log(\"Template has more than one top elements. Using the first one. In: \"),console.log(s),console.log(\"Node: \"),console.log(e);const o=Object.keys(s)[0],l=s[o];t.utils.isValidElement(o)?i=t.utils.newElement(o):void 0!==l.tagName?(i=t.utils.newElement(l.tagName),s[l.tagName]=l,delete s[o]):(console.error(\"Template defined an element which can not be identified: [\"+o+\"], using <span> in:\"),console.log(s),console.log(\"Node: \"),console.log(e),i=t.utils.newElement(\"span\"))}else console.error(\"Template has no definition, and it can not be guessed. Using <span>. Template: \"),console.log(s),console.log(\"Node: \"),console.log(e),i=t.utils.newElement(\"span\")}else e.childElementCount>0&&(i=t.utils.htmlElement(e.innerHTML.trim()))}if(s)if(t.utils.isPlainObject(s)){const n=t.utils.newEmptyNode();n.append(i),i=this.doDom(n,s).children[0],t.utils.defineProp(e,\"__template\",s)}else i=t.utils.isHtml(s)?t.utils.htmlElement(s):t.utils.isSelectorID(s)?t.utils.htmlElement(document.querySelector(s).innerHTML):t.utils.newElement(s);if(i)if(i.childrenElementCount>1){console.log(\"Templates only supports a single child. Multiple children were detected, wrapping them with <span>. Template:\"),console.log(i);const e=t.utils.newElement(\"span\");e.append(i),i=e}else t.utils.defineProp(e,\"_template\",i);else console.log(\"Template was not found for element, using <span>:\"),console.log(e),i=t.utils.newElement(\"span\");return i}}setUniqueAttrib(e,s){e.hasOwnProperty(s)||Object.defineProperty(e,s,{get:function(){return this.hasAttribute(s)},set:function(e){const i=this.parentNode?this.parentNode.find(\"[\"+s+\"]\"):null;i&&i.removeAttribute(s),t.utils.setAttr(this,s,e)}})}updateValue(e,s,i){if(this.isUpdateLink(i)){const n=this,o=i[0],l=i[1],r=i[2];if(i=o[l],o instanceof CSSStyleDeclaration&&this._stored.styles.includes(o)){const i=this._stored.styleNodes[this._stored.styles.indexOf(o)];t.updates&&(i.onupdate=function(t){t.detail&&\"style\"===t.detail.property&&t.detail.newValue.startsWith(l+\":\")&&n.setShortValue(e,s,r(this.style[l]))})}else if(o instanceof DOMStringMap&&this._stored.datasets.includes(o)){const i=this._stored.datasetNodes[this._stored.datasets.indexOf(o)];t.updates&&(i.onupdate=t=>{t.detail&&t.detail.property===\"data-\"+l&&n.setShortValue(e,s,r(t.detail.newValue))})}else t.updates&&(o.onupdate=i=>{i.detail&&i.detail.property===l&&(t.utils.isObject(e[s])||n.setShortValue(e,s,r(i.detail.newValue)))})}return i}setShortValue(e,s,i){if(t.utils.isNode(e[s]))if(t.short){const n=this.plainToObject(e[s],i),o=t.utils.isPlainObject(n)&&Object.keys(n).length>=1?Object.keys(n)[0]:null;o&&(e[s][o]=i)}else console.log(\"Short is disabled. Trying to set a value (\"+i+\") in a node:\"),console.log(e[s]),console.log(\"Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'\");else e[s]=i}getShortValue(e,s,i){let n=null;if(t.utils.isNode(e[s]))if(t.short){const o=this.plainToObject(e[s],i||\"\"),l=t.utils.isPlainObject(o)&&Object.keys(o).length>=1?Object.keys(o)[0]:null;l&&(n=e[s][l])}else console.log(\"Short is disabled. Trying to get a value from node:\"),console.log(e[s]),console.log(\"Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'\");else n=e[s];return n}proxy(e,s){return!t.short||null===e||void 0!==e.domNode&&void 0===s?e:(e.domNode=e,new Proxy(e,{get:(e,s)=>{const i=e[s];switch(!0){case null==i:return null;case t.utils.isFunction(i):return i.bind(e);case i.domNode&&void 0!==e[\"$\"+s]:return e[\"$\"+s];case void 0===i.domNode&&t.utils.isElement(i):return this.proxy(i);default:return i}},set:(e,s,i)=>{let n=\"\";return t.utils.isElement(e[s])?(n=this.getShortValue(e,s,i),this.setShortValue(e,s,i)):\"onupdate\"===s?t.updates?t.utils.isFunction(i)?(e.addEventListener(\"update\",i,!0),n=e[s],e[s]=i):(console.error(\"Value passed to 'onupdate' is incorrect, in node:\"),console.log(e),console.log(\"Value: (not a function)\"),console.log(i)):(console.log(\"Updates are not available when `m2d2.updates == false`:\"),console.log(e)):\"items\"===s?(e.items.clear(),this.doItems(e,i)):(n=e[s],i=this.updateValue(e,s,i),e[s]=i),t.updates&&void 0!==e.onupdate&&i!==n&&e.dispatchEvent(new CustomEvent(\"update\",{detail:{type:typeof i,property:s,newValue:i,oldValue:n}})),!0}}))}onObserve(e,s){e.forEach((e=>{const s=e.target;if(!(this._stored.events.indexOf(e)>=0)&&(this._stored.events.push(e),setTimeout((()=>{const t=this._stored.events.indexOf(e);t>=0&&this._stored.events.splice(t,1)}),t.storedEventsTimeout),void 0!==s.onupdate))if(\"attributes\"===e.type){const i=t.utils.getAttrOrProp(s,e.attributeName);i!==e.oldValue&&s.dispatchEvent(new CustomEvent(\"update\",{detail:{type:typeof i,property:e.attributeName,newValue:i,oldValue:e.oldValue}}))}else if(\"childList\"===e.type)if(\"#text\"===(e.addedNodes[0]||e.removedNodes[0]).nodeName){const t=e.addedNodes[0].textContent,i=e.removedNodes.length?e.removedNodes[0].textContent:null;t!==i&&s.dispatchEvent(new CustomEvent(\"update\",{detail:{type:typeof t,property:\"text\",newValue:t,oldValue:i}}))}else if(void 0!==s.items){const t=e.addedNodes,i=e.removedNodes;t!==i&&s.dispatchEvent(new CustomEvent(\"update\",{detail:{type:typeof t,property:\"items\",newValue:t,oldValue:i}}))}}))}observe(e){if(t.updates){const t=new MutationObserver(this.onObserve.bind(this)),s={attributeOldValue:!0,subtree:!0,childList:!0},i=e.domNode||e;t.observe(i,s)}}getProxyNode(e,t){const s=this.doDom(e,t);if(s)return this.observe(s),this.proxy(s)}extendItems(e){function s(t){t.forEach((t=>{const s=t.parentNode.removeChild(t);e.append(s)}))}const i=e.items;Object.getOwnPropertyNames(Array.prototype).concat([\"clear\",\"get\",\"remove\",\"selected\",\"first\",\"last\",\"findAll\"]).forEach((n=>{if(void 0===i[n]){let o=null;const l=this;switch(n){case\"copyWithin\":case\"fill\":case\"splice\":o=function(){console.log(\"Not available yet: \"+n)};break;case\"reverse\":o=function(...e){if(this.items.length){const t=Array.from(this.items),i=t[n](...e);return s(t),i}};break;case\"clear\":o=function(){for(;this.items[0];)this.items[0].remove()};break;case\"get\":o=function(e){let s=null;return this.items.length&&this.items.some((i=>{const n=t.utils.isNumeric(e)?1*i.dataset.id==1*e:i.dataset.id===e;if(i.dataset&&n)return s=i,!0})),s};break;case\"selected\":o=function(){return l.proxy(this.find(\":scope > [selected]\"))};break;case\"first\":o=function(){return l.proxy(this.items[0])};break;case\"last\":o=function(){return l.proxy(this.items[this.items.length-1])};break;case\"pop\":o=function(){if(this.items.length){const e=this[0].parentNode;return l.proxy(e.removeChild(this.items[this.items.length-1]))}};break;case\"push\":o=function(e){if(e=l.plainToObject(this,e),t.utils.isElement(e))this.append(e);else if(t.utils.isPlainObject(e)){const t=this.items.length,s=l.getItem(this,t,e);this.appendChild(s)}else console.log(\"Trying to push an unknown value into a list:\"),console.log(e)};break;case\"remove\":o=function(e){if(this.items.length){const t=this.items.get(e);1===t.length&&t.remove()}};break;case\"shift\":o=function(){if(this.items.length){const e=this.items[0].parentNode;return l.proxy(e.removeChild(this.items[0]))}};break;case\"sort\":o=function(e){if(this.items.length){const t=Array.from(this.items);t.sort(e||((e,t)=>e.text.localeCompare(t.text))),s(t)}};break;case\"unshift\":o=function(e){if(e=l.plainToObject(this,e),t.utils.isElement(e))this.prepend(e);else if(t.utils.isPlainObject(e)){const t=this.items.length,s=l.getItem(this,t,e);this.prepend(s)}else console.log(\"Trying to unshift an unknown value into a list:\"),console.log(e)};break;default:let i=n;switch(!0){case\"findAll\"===n:i=\"filter\";case t.utils.isFunction(Array.prototype[n]):const s=function(...t){const s=[];return Array.from(e.items).forEach((e=>{s.push(l.proxy(e))})),Array.from(s)[i](...t)};switch(n){case\"find\":o=function(...e){return t.utils.isString(e[0])?this.find(e[0]):s(...e)};break;case\"findAll\":o=function(...e){return 0===e.length?this.findAll():t.utils.isString(e[0])?this.findAll(e[0]):s(...e)};break;case\"concat\":o=function(...e){for(let s=0;s<e.length;s++)if(t.utils.isArray(e[s]))for(let i=0;i<e[s].length;i++){let n=e[s][i];if(!t.utils.isElement(n)&&(n=l.plainToObject(this,e[s][i]),t.utils.isPlainObject(n))){const e=this.items.length;n=l.getItem(this,e,n)}this.items.push(n)}};break;default:o=s}}}o&&t.utils.defineProp(i,n,o.bind(e))}}))}}return t}));","// ------- Functions -------\n\"use strict\";\n/**\n * Functions useful to work with Javascript data and DOM\n * Used mainly in M2D2 core library but exposed to the\n * consumer.\n * @Author: A.Lepe <dev@alepe.com>\n *\n * This extension provides:\n * $.isString\n * $.isBool\n * $.isNumeric\n * $.isSelectorID\n * $.isPlainObject\n * $.isObject\n * $.isArray\n * $.isFunction\n * $.isElement\n * $.isNode\n * $.isHtml\n * $.isEmpty\n * $.isVisible\n * $.inView\n * $.cleanArray\n * $.isValidElement\n * $.exists\n * $.getAttrOrProp\n * $.hasAttrOrProp\n * $.hasAttr\n * $.hasProp\n * $.setPropOrAttr\n * $.setAttr\n * $.defineProp\n * $.htmlElement\n * $.newElement\n * $.newEmptyNode\n * $.getMethods\n * $.appendAllChild\n * $.prependAllChild\n */\nclass Utils {\n\t/**\n\t * Return true if variable is string\n\t * @param {*} v\n\t * @returns {boolean}\n\t */\n    isString(v) {\n        return typeof v === 'string';\n    };\n\t/**\n\t * Return true if variable is a boolean\n\t * @param {*} b\n\t * @returns {boolean}\n\t */\n    isBool(b) {\n        return typeof b === 'boolean';\n    };\n\t/**\n\t * Return true if variable is a number\n\t * @param {*} n\n\t * @returns {boolean}\n\t */\n    isNumeric(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\t/**\n\t * Return true if selector is an id selector\n\t * @param {string} s\n\t * @returns {boolean}\n\t */\n    isSelectorID(s) {\n        return (s + \"\").trim().indexOf(\"#\") === 0;\n    };\n\t/**\n\t * Returns true if object is a \"plain\" object (not an array)\n\t * @param o\n\t * @returns {boolean}\n\t */\n    isPlainObject(o) {\n        return o.constructor.name === \"Object\";\n    };\n\t/**\n\t * Returns true if variable is an object (any kind, e.g. Array)\n\t * @param {*} oa\n\t * @returns {boolean}\n\t */\n    isObject(oa) {\n        return typeof oa === 'object';\n    };\n\t/**\n\t * Returns true if object is an array\n\t * @param {object} a\n\t * @returns {boolean}\n\t */\n    isArray(a) {\n        return Array.isArray(a);\n    };\n\t/**\n\t * Returns true if object is a function\n\t * @param {object} f\n\t * @returns {boolean}\n\t */\n    isFunction(f) {\n        return typeof f === 'function';\n    };\n\t/**\n\t * Returns true if object is an HTMLElement\n\t * @param {object} n\n\t * @returns {boolean}\n\t */\n    isElement(n) {\n        return n instanceof HTMLElement;\n    };\n\n\t/**\n\t * Return true if object is a Node or DocumentFragment\n\t * @param {object} n\n\t * @returns {boolean}\n\t */\n    isNode(n) {\n    \treturn (n instanceof Node || n instanceof DocumentFragment);\n\t}\n\t/**\n\t * Return true if string seems to be an HTML code\n\t * @param {string} s\n\t * @returns {boolean}\n\t */\n    isHtml(s) {\n        return (s + \"\").trim().indexOf(\"<\") !== -1;\n    };\n\t/**\n\t * Checks if an object is empty\n\t * @param {object} obj\n\t * @returns {boolean}\n\t */\n    isEmpty(obj) {\n        return obj === undefined || (this.isObject(obj) && Object.keys(obj).length === 0) || obj === \"\";\n    };\n    /**\n     * Checks if an element is visible\n     * @param {HtmlElement}\n     * @returns {boolean}\n     */\n    isVisible(elem) {\n        if(! this.isElement(elem)) {\n            console.log(\"(isVisible) Not an element: \");\n            console.log(elem);\n            return false;\n        }\n        const display = elem.style.display !== \"none\";\n        const notHidden = elem.style.visibility !== \"hidden\";\n        return display && notHidden;\n    };\n    /**\n     * Checks if element is in view\n     * @param {HtmlElement}\n     * @returns {boolean}\n     */\n    inView(elem) {\n        const rect = elem.getBoundingClientRect();\n        return rect.top >= 0 && rect.left >= 0 &&\n               rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n               rect.right <= (window.innerWidth || document.documentElement.clientWidth) &&\n               rect.width > 0 && rect.height > 0\n    }\n\t/**\n\t * Remove null, empty or undefined values from an array\n\t * @param {Array} a\n\t * @returns {Array}\n\t */\n    cleanArray(a) {\n        return a.filter(function(e){ return e === 0 || e });\n    };\n\t/**\n\t * Checks if a tag name is a valid HTML element\n\t * @param {string} tagName\n\t * @returns {boolean}\n\t */\n    isValidElement(tagName) {\n        const $node = this.newElement(tagName);\n        return tagName !== \"template\" && $node.constructor.name !== \"HTMLUnknownElement\";\n    }\n    /**\n     * Returns true if element exists in DOM based on selector\n     */\n    exists(selector) {\n        return document.querySelector(selector) !== null;\n    }\n\t/**\n\t * Get attribute or property\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @returns {*}\n\t */\n\tgetAttrOrProp ($node, key) {\n\t\tlet value = \"\";\n\t\tif(this.hasAttrOrProp($node,  key)) {\n\t\t\tvalue = this.hasAttr($node, key) ? $node.getAttribute(key): $node[key];\n\t\t}\n\t\treturn value\n\t}\n\t/**\n\t * If a node contains either a property or an attribute\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {String} key\n\t * @return {boolean}\n\t */\n\thasAttrOrProp ($node, key) {\n\t\treturn this.hasAttr($node, key) || this.hasProp($node, key);\n\t}\n\t/**\n\t * If a node has an attribute\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} attr\n\t * @return {boolean}\n\t */\n\thasAttr ($node, attr) {\n\t\tlet hasAttr = false;\n\t\tif($node && !this.isNumeric(attr)) {\n\t\t\tswitch(attr) {\n\t\t\t\tcase \"checked\":\n\t\t\t\t\thasAttr = ($node.type !== undefined && ($node.type === \"radio\" || $node.type === \"checkbox\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\thasAttr = $node.hasAttribute !== undefined ? $node.hasAttribute(attr) : false;\n\t\t\t}\n\t\t}\n\t\treturn hasAttr;\n\t}\n\t/**\n\t * If a node has a property which is not an attribute\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} prop\n\t * @returns {boolean}\n\t */\n\thasProp ($node, prop) {\n\t\tlet hasProp = false;\n\t\tif($node && !this.isNumeric(prop)) {\n\t\t    let has = $node[prop] !== undefined;\n\t\t    if(has && $node[prop] === null && prop === \"value\") {\n\t\t\t\thas = false;\n\t\t\t}\n\t\t\thasProp = (has &&! ($node[prop] instanceof Node)) &&! $node.hasAttribute(prop);\n\t\t}\n\t\treturn hasProp;\n\t}\n\n\t/**\n\t * Set the value of a property which is true/false\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n\t */\n\tsetPropOrAttr ($node, key, value) {\n\t    if(this.hasProp($node, key)) {\n\t    \ttry {\n\t\t\t\t$node[key] = value;\n\t\t\t} catch(ignore) { //If fails, set it as attribute: (e.g. input.list)\n\t\t\t\tthis.setAttr($node, key, value);\n\t\t\t}\n\t    } else {\n\t        this.setAttr($node, key, value);\n    \t}\n\t}\n\n    /**\n     * Set attribute to node. If value is false, will remove it.\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n     */\n\tsetAttr ($node, key, value) {\n        if(value) {\n            $node.setAttribute(key, value);\n        } else {\n            $node.removeAttribute(key);\n        }\n\t}\n\t/**\n\t * Define a property to an object\n\t * @private\n\t * @param {Object} obj\n\t * @param {string} prop\n\t * @param {string} def\n\t */\n\tdefineProp (obj, prop, def) {\n\t\tif(this.isObject(obj)) {\n\t\t\tif(obj[prop] === undefined) {\n\t\t\t\tObject.defineProperty(obj, prop, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: true\n\t\t\t\t});\n\t\t\t\tobj[prop] = def;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Creates a Node using HTML code\n\t * @param {string} html\n\t * @returns {HTMLElement}\n\t */\n\thtmlElement(html) {\n\t\t//return document.createRange().createContextualFragment(html); FIXME\n\t\tconst template = this.newElement(\"template\");\n        template.innerHTML = html.trim();\n        return template.content.firstChild;\n\t};\n\t/**\n\t * Creates a Node with a tag name\n\t * @param {string} tagName\n\t * @returns {HTMLElement}\n\t */\n\tnewElement(tagName) {\n\t    if(!tagName || this.isNumeric(tagName)) {\n\t        tagName = \"invalid\";\n\t    }\n\t\treturn document.createElement(tagName);\n\t};\n\t/**\n\t * Creates an empty node (DocumentFragment)\n\t * @returns {DocumentFragment}\n\t */\n\tnewEmptyNode() {\n\t\treturn new DocumentFragment()\n\t}\n\t/**\n\t * Get all methods of class object\n\t * https://stackoverflow.com/a/67260131/196507\n\t * @param {object} obj\n\t * @returns {Array}\n\t */\n\tgetMethods(obj) {\n\t\tconst o = Reflect.getPrototypeOf(obj);\n\t\tconst x = Reflect.getPrototypeOf(o);\n\t\treturn Reflect.ownKeys(o).filter(it => Reflect.ownKeys(x).indexOf(it) < 0);\n\t};\n\t/**\n\t * Append all child from one node to another\n\t * @param {HTMLElement} $srcNode\n\t * @param {HTMLElement} $tgtNode\n\t */\n\tappendAllChild($srcNode, $tgtNode) {\n\t\t//Update all at once\n\t\t//$node.append(...$outElem.childNodes); //<-- works but it is slower\n\t\twhile ($srcNode.firstChild) {\n\t\t\t$tgtNode.append($srcNode.firstChild);\n\t\t}\n\t}\n\t/**\n\t * Prepend all child from one node to another\n\t * @param {HTMLElement} $srcNode\n\t * @param {HTMLElement} $tgtNode\n\t */\n\tprependAllChild($srcNode, $tgtNode) {\n\t\t//Update all at once\n\t\t//$node.append(...$outElem.childNodes); //<-- works but it is slower\n\t\twhile ($srcNode.firstChild) {\n\t\t\t$tgtNode.prepend($srcNode.firstChild);\n\t\t}\n\t}\n}\n","/**\n * @author: A. Lepe\n * @url : https://gitlab.com/intellisrc/m2d2/\n * @since: May, 2018\n *\n * M2D2 Class\n */\nclass m2d2 {\n    'use strict';\n\t_stored = {\n\t\tevents : [],\n\t\tdatasetNodes : [],\n\t\tdatasets : [],\n\t\tstyleNodes : [],\n\t\tstyles : []\n\t}\n\tstatic storedEventsTimeout = 50; //ms to group same events\n\tstatic short = true; //Enable short assignation (false = better performance) TODO: document (use Proxy like: obj.a = \"text\")\n\tstatic updates = true; //Enable \"onupdate\" (false = better performance) TODO: document (use MutationObserver)\n\tstatic utils = new Utils();\n\n\tconstructor() {\n        // Override some methods to prevent strange behaviour (issue #53):\n       [\"after\",\"before\",\"append\",\"prepend\",\"insertAdjacentElement\",\"replaceWith\"].forEach(p => {\n            Element.prototype[\"_\"+p] = Element.prototype[p];\n            Element.prototype[p] = function(...args) {\n                const arrArgs = Array.from(args);\n                arrArgs.forEach((arg, index) => {\n                    if(arg !== undefined && arg.domNode !== undefined && arg.domNode instanceof Element) { arrArgs[index] = arg.domNode; }\n                })\n                this[\"_\"+p].apply(this, arrArgs);\n            }\n        });\n\t}\n\t//------------------------- STATIC -----------------------------\n\tstatic instance = new m2d2();\n\tstatic extensions = {}; // Additional properties for DOM\n\tstatic main = (() => {\n\t\tconst f = (selector, object) => {\n\t\t\tconst node = this.instance.getProxyNode(selector, object);\n\t\t\t// TEST: 13\n\t\t\tif(node && node.onready && m2d2.utils.isFunction(node.onready)) {\n\t\t\t\tnode.addEventListener(\"ready\", node.onready, { once : true });\n\t\t\t\t// This will be called just after the object has been returned (to be sure it was created)\n\t\t\t\t// Without setTimeout \"onready\" would be the same as \"onload\".\n\t\t\t\tsetTimeout(() => {\n                    node.dispatchEvent(new CustomEvent('ready'));\n\t\t\t\t}, 10); //TODO: Document\n\t\t\t}\n\t\t\t// Store references to datasets (used later in onpudate dataset, style):\n\t\t\t[\"dataset\",\"style\"].forEach(i => {\n\t\t\t    if(node && node[i]) {\n\t\t\t\t    this.instance._stored[i + \"s\"].push(node[i]);\n\t\t\t\t    this.instance._stored[i + \"Nodes\"].push(node);\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn node;\n\t\t}\n\t    // Extends Utils:\n\t    m2d2.utils.getMethods(m2d2.utils).forEach(k => { f[k] = m2d2.utils[k] });\n\t\treturn f;\n\t})();\n\t/**\n\t * Initialization. Use: m2d2.ready()\n\t * @param { function } callback\n\t */\n\tstatic ready(callback) {\n\t\tdocument.addEventListener(\"DOMContentLoaded\", () => {\n            callback(m2d2.main);\n\t\t});\n\t}\n\n\t/**\n\t * Execute something on load. It will search for extensions.\n\t * @param {function} callback\n\t * TEST: 00\n\t */\n\tstatic load(callback) {\n\t    if(callback !== undefined) {\n            const ext = callback(m2d2.main); //main can be extended here\n            if(m2d2.utils.isObject(ext) && !m2d2.utils.isEmpty(ext)) {\n                Object.keys(ext).forEach(k => {\n                    if(m2d2.utils.isValidElement(k)) {\n                        if(m2d2.extensions[k] === undefined) {\n                            m2d2.extensions[k] = {};\n                        }\n                        // Check that we are not replacing any existing property:\n                        const $node = m2d2.utils.newElement(k);\n                        Object.keys(ext[k]).forEach(it => {\n                            if(m2d2.utils.hasProp($node, it)) {\n                                console.log(\"Warning: property [\" + it + \"] already exists \" +\n                                    \"in node: [\" + k + \"] while trying to extend it. \" +\n                                    \"Unexpected behaviour may happen.\");\n                            }\n                        });\n                        Object.assign(m2d2.extensions[k], ext[k]);\n                    } else {\n                        if(m2d2.extensions[\"*\"] === undefined) {\n                            m2d2.extensions[\"*\"] = {};\n                        }\n                        const $node = m2d2.utils.newElement(\"div\");\n                        Object.keys(ext[k]).forEach(it => {\n                            if(m2d2.utils.hasProp($node, it)) {\n                                console.log(\"Warning: property [\" + it + \"] already exists \" +\n                                    \"in Node while trying to extend it. \" +\n                                    \"Unexpected behaviour may happen.\");\n                            }\n                        });\n                        Object.assign(m2d2.extensions[\"*\"], ext[k]);\n                    }\n                });\n            }\n\t\t}\n\t\treturn m2d2.main; //TODO: documentation : const $ = m2d2.load();\n\t}\n\t/**\n\t * M2D2 Will set all extensions to DOM objects //TODO: documentation\n\t * @param {string, HTMLElement} selector\n\t * @param {HTMLElement, Node} [$root]\n\t * @returns {HTMLElement}\n\t * TEST: 01\n\t */\n\textDom(selector, $root) {\n\t\tif(! selector) {  // Do not proceed if selector is null, empty or undefined\n\t\t\tconsole.error(\"Selector was empty\");\n\t\t\treturn null;\n\t\t}\n\t\tif($root === undefined) { $root = document }\n\t\tconst $node = m2d2.utils.isNode(selector) ? selector : $root.querySelector(selector);\n\t\tif(! $node) {\n\t\t\tif(m2d2.utils.isString(selector)) {\n\t\t\t\tconsole.error(\"Selector: \" + selector + \" didn't match any element in node:\");\n\t\t\t\tconsole.log($root);\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Node was null\");\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tif($node._m2d2 === undefined) {\n\t\t\t$node._m2d2 = true; //flag to prevent it from re-assign methods\n\t\t\t[\"parent\",\"sibling\",\"posterior\",\"anterior\",\"find\",\"findAll\",\"onupdate\",\"onready\",\"show\",\"onshow\",\"inView\",\"css\",\"text\",\"html\",\"getData\",\"index\"].forEach(f => {\n\t\t\t\tif($node.hasOwnProperty(f)) {\n\t\t\t\t\tconsole.log(\"Node already had [\"+f+\"] property. It might cause unexpected behaviour.\")\n\t\t\t\t\tconsole.log(\"You may need to update the M2D2 version or report it to: github.com/intellisrc/m2d2/\")\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Properties:\n\t\t\t// TEST: 01, ...\n\t\t\tObject.defineProperty($node, \"text\", {\n\t\t\t\tget() { return this.childNodes.length ? this.innerText : this.textContent; },\n\t\t\t\tset(value) {\n\t\t\t\t\t// text should only change Text nodes and not children: //TODO: documentation\n\t\t\t\t\tif(this.childNodes.length) {\n\t\t\t\t\t\tlet found = false;\n\t\t\t\t\t\tthis.childNodes.forEach(n => {\n\t\t\t\t\t\t\tif(n.constructor.name === \"Text\") {\n\t\t\t\t\t\t\t\tn.nodeValue = value;\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif(! found) {\n\t\t\t\t\t\t\tthis.prepend(document.createTextNode(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.textContent = value\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t// TEST: 43,13,27,...\n\t\t\tObject.defineProperty($node, \"html\", {\n\t\t\t\tget() { return this.innerHTML; },\n\t\t\t\tset(value) { this.innerHTML = value;  }\n\t\t\t});\n\t\t\t// TEST: 02\n\t\t\tObject.defineProperty($node, \"css\", {   //TODO: document new behaviour\n\t\t\t\tget() {\n\t\t\t\t    return this.classList;\n\t\t\t\t},\n\t\t\t\tset(value) {\n\t\t\t\t    if(m2d2.utils.isArray(value)) {\n    \t\t\t\t    this.className = value.join(\" \");\n\t\t\t\t    } else if(m2d2.utils.isString(value)) {\n    \t\t\t\t    this.className = value;\n\t\t\t\t    } else if(m2d2.utils.isPlainObject(value)) {\n\t\t\t\t        Object.keys(value).forEach(c => {\n\t\t\t\t            if(value[c]) {\n\t\t\t\t                this.classList.add(c);\n\t\t\t\t            } else {\n\t\t\t\t                this.classList.remove(c);\n\t\t\t\t            }\n\t\t\t\t        });\n\t\t\t\t    } else {\n\t\t\t\t        console.error(\"Trying to assign a wrong value to css : \" + value);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t});\n\t\t\t// TEST: 16\n\t\t\tObject.defineProperty($node, \"show\", {\n\t\t\t\tget() { //TODO: document\n\t\t\t\t    return m2d2.utils.isVisible(this);\n\t\t\t\t},\n\t\t\t\tset(show) {\n                    const cssDisplay = () => {\n                        return getComputedStyle(this, null).display;\n                    };\n                    const defaultDisplay = () => {\n                        const b = document.getElementsByTagName(\"body\")[0];\n                        const t = document.createElement(\"template\");\n                        const n = document.createElement(this.tagName);\n                        t.append(n);\n                        b.append(t);\n                        const display = getComputedStyle(n, null).display;\n                        t.remove();\n                        return display;\n                    };\n                    if(show) {\n                        if(cssDisplay() === \"none\") {\n                            if(this._m2d2_display) {\n                                this.style.display = this._m2d2_display;\n                            } else {\n                                this.style.removeProperty(\"display\");\n                                if(cssDisplay() === \"none\") {\n                                    const defaultShow = defaultDisplay();\n                                    this.style.display = this.dataset.display || (defaultShow !== \"none\" ? defaultShow : \"block\");\n                                }\n                            }\n                            // TEST: 16\n                            if(this.onshow !== undefined && m2d2.utils.isFunction(this.onshow)) { //TODO: document onshow\n                                this.onshow(this);\n                            }\n                        }\n                    } else {\n                        const stored = this.style.display !== \"none\" ? this.style.display : cssDisplay();\n                        if(stored !== \"none\") {\n                            this._m2d2_display = stored;\n                        }\n                        this.style.display = \"none\"\n                    }\n\t\t\t\t}\n\t\t\t});\n\t\t\t//TODO: document how to extend\n\t\t\t//TODO: test\n\t\t\tlet extend = {};\n\t\t\tif(m2d2.extensions[\"*\"] !== undefined) {\n\t\t\t\tObject.assign(extend, m2d2.extensions[\"*\"]);\n\t\t\t}\n\t\t\tif(m2d2.extensions[$node.tagName] !== undefined) {\n\t\t\t\tObject.assign(extend, m2d2.extensions[$node.tagName]);\n\t\t\t}\n\t\t\t// Functions:\n\t\t\tObject.assign($node, {\n\t\t\t    inView: () => { //TODO: document\n\t\t\t        return m2d2.utils.inView($node);\n\t\t\t    },\n\t\t\t\tposterior: () => { //TEST: 07\n\t\t\t\t    return $node.nextElementSibling;\t\t\t\t},\n\t\t\t\tanterior: () => { //TEST: 07\n                    return $node.previousElementSibling;\n\t\t\t\t},\n\t\t\t\tparent: () => { //TODO: test\n\t\t\t\t\treturn this.extDom($node.parentElement);\n\t\t\t\t},\n\t\t\t\tsibling: (sel) => { //TODO: test\n\t\t\t\t\treturn $node.parentElement.find(sel);\n\t\t\t\t},\n\t\t\t\tfind: (it) => { // Test: 04\n\t\t\t\t\tconst node = $node.querySelector(it)\n\t\t\t\t\treturn node ? this.extDom(node) : null;\n\t\t\t\t},\n\t\t\t\tfindAll: (it) => { //TEST: 05\n\t\t\t\t\tconst nodeList = it === undefined ? Array.from($node.children) : $node.querySelectorAll(it);\n\t\t\t\t\tnodeList.forEach(n => { this.extDom(n) });\n\t\t\t\t\treturn nodeList;\n\t\t\t\t},\n\t\t\t}, extend);\n\t\t\t// Only if the object doesn't have index already (like OPTION)\n\t\t\tif($node.index === undefined) {\n\t\t\t\t$node.index = () => { //TEST: 07\n\t\t\t\t    return Array.from($node.parentNode.children).indexOf($node);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Let attributes know about changes in values //TODO: test\n\t\t\tif([\"INPUT\", \"TEXTAREA\", \"SELECT\"].indexOf($node.tagName) >= 0 && m2d2.utils.hasAttrOrProp($node, \"value\")) {\n\t\t\t\t$node.oninput = function() { this.setAttribute(\"value\", this.value )}\n\t\t\t}\n\t\t\t// Add getData() to form: //TODO: document\n\t\t\tif($node.tagName === \"FORM\") {\n\t\t\t\t$node.getData = function (includeNotVisible) { //TODO document: includeNotVisible\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tconst fd = new FormData(this);\n\t\t\t\t\tconst include = includeNotVisible || false;\n\t\t\t\t\tfor (let pair of fd.entries()) {\n                        const elem = $node.find(\"[name='\"+pair[0]+\"']\");\n\t\t\t\t\t\tif(include || elem.type === \"hidden\" || elem.show) {\n\t\t\t\t\t\t    const name = pair[0];\n\t\t\t\t\t\t    const val = elem.type === \"file\" ? elem.files : pair[1];\n\t\t\t\t\t\t    if(data[name] !== undefined) {\n\t\t\t\t\t\t        if(m2d2.utils.isArray(data[name])) {\n\t\t\t\t\t\t            data[name].push(val);\n\t\t\t\t\t\t        } else {\n\t\t\t\t\t\t\t        data[name] = [data[name], val];\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t    } else {\n\t\t\t\t\t\t\t    data[name] = val;\n\t\t\t\t\t\t\t}\n                        }\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $node;\n\t\t} else {\n\t\t\treturn $node;\n\t\t}\n\t}\n\t/**\n\t * M2D2 will create custom links and properties\n\t * @param {string, HTMLElement, Node} selector\n\t * @param {Object} object\n\t * @returns {HTMLElement, Proxy}\n\t * TEST: 03,...\n\t */\n\tdoDom(selector, object) {\n\t\t// When no selector is specified, set \"body\"\n\t\tif(m2d2.utils.isObject(selector) && object === undefined) {\n\t\t\tobject = selector;\n\t\t\tselector = m2d2.utils.newEmptyNode(); //TODO: document\n\t\t\tif(object.warn === undefined) {\n\t\t\t    object.warn = false;\n\t\t\t}\n\t\t}\n\t\tif(!(m2d2.utils.isString(selector) || m2d2.utils.isElement(selector) || m2d2.utils.isNode(selector))) {\n\t\t\tconsole.error(\"Selector is not a string or a Node:\")\n\t\t\tconsole.log(selector);\n\t\t\treturn null;\n\t\t}\n\t\tif(m2d2.utils.isString(selector) &&! document.querySelector(selector)) {\n\t\t    console.log(\"Selected element doesn't exists: \" + selector)\n\t\t    return null;\n\t\t}\n\t\tconst $node = this.extDom(selector); // Be sure that $node is an extended DOM object\n\t\t// If there is no object return only extension\n\t\tif(object === undefined) { //TODO: documentation: extending nodes\n\t\t\treturn $node;\n\t\t}\n\t\tobject = this.plainToObject($node, object); // Be sure it's an object\n\n\t\t// TEST: 03\n\t\t// We filter-out some known keys:\n\t\tObject.keys(object).filter(it => ! [\"tagName\"].includes(it)).forEach(key => {\n\t\t\tlet origValue = object[key];\n\t\t\tif(origValue === undefined || origValue === null) {\n\t\t\t    console.log(\"Value was not set for key: \" + key + \", 'empty' was used in object: \");\n\t\t\t    console.log(object);\n\t\t\t    console.log(\"In node:\");\n\t\t\t    console.log($node);\n\t\t\t    origValue = \"\";\n\t \t\t}\n            //Look for onupdate inline ([ Node, string ])\n            let value = this.updateValue($node, key, origValue);\n\t\t\t//Look for property first:\n\t\t\tlet isProp = m2d2.utils.hasProp($node, key);\n\t\t\tlet isAttr = m2d2.utils.hasAttr($node, key);\n\t\t\t//Identify if value matches property type:\n\t\t\tlet foundMatch = false;\n\t\t\tif(isAttr || isProp) {\n\t\t\t\t// noinspection FallThroughInSwitchStatementJS\n\t\t\t\tswitch(true) {\n\t\t\t\t\t// Math found:\n\t\t\t\t\tcase key === \"value\" && m2d2.utils.hasProp($node, \"valueAsDate\") && value instanceof Date: // Dates\n\t\t\t\t\t\tkey = \"valueAsDate\"; //renamed value to valueAsDate\n\t\t\t\t\tcase key === \"css\": // css is a Proxy so it fails to verify:\n\t\t\t\t\tcase typeof value === typeof $node[key]: //Same Time\n\t\t\t\t\tcase m2d2.utils.isString($node[key]) && m2d2.utils.isNumeric(value): //Numeric properties\n\t\t\t\t\tcase (m2d2.utils.isFunction(value) && m2d2.utils.isObject($node[key])): //Functions\n\t\t\t\t\tcase m2d2.utils.isBool(value) && m2d2.utils.isString($node[key]): //Boolean\n\t\t\t\t\tcase typeof $node[key] === \"object\" && $node.tagName === \"INPUT\": //Cases like \"list\" in input\n\t\t\t\t\t\tfoundMatch = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Properties and Attributes:\n\t\t\tif(foundMatch) {\n\t\t\t\tlet error = false;\n\t\t\t\tswitch(key) {\n\t\t\t\t\tcase \"classList\": //TODO: test\n\t\t\t\t\t\tif(m2d2.utils.isArray(value)) {\n\t\t\t\t\t\t\tvalue.forEach(v => {\n\t\t\t\t\t\t\t\t$node[key].add(v);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if(m2d2.utils.isString(value)) {\n\t\t\t\t\t\t\t$node[key].add(value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\terror = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"style\": //TODO: test\n\t\t\t\t\tcase \"dataset\": //TODO: as it is already a DOM, we don't need it maybe?\n\t\t\t\t\t\tif(m2d2.utils.isPlainObject(value)) {\n\t\t\t\t\t\t\tObject.keys(value).forEach(k => {\n\t\t\t\t\t\t\t\t$node[key][k] = this.updateValue($node[key], k, value[k]);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\terror = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tswitch(true) {\n\t\t\t\t\t\t\tcase m2d2.utils.isBool(value): // boolean properties\n\t\t\t\t\t\t\tcase m2d2.utils.hasAttrOrProp($node, key):\n                                m2d2.utils.setPropOrAttr($node, key, value);\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t$node[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(error) {\n\t\t\t\t\tconsole.error(\"Invalid value passed to '\" + key + \"': \")\n\t\t\t\t\tconsole.log(value);\n\t\t\t\t\tconsole.log(\"Into Node:\");\n\t\t\t\t\tconsole.log($node);\n\t\t\t\t}\n\t\t\t// Look for elements:\n\t\t\t} else {\n\t\t\t    const options = [];\n\t\t\t    try {\n\t\t\t        // TEST: 03\n\t\t\t        // Functions can not be placed directly into elements, so we skip\n\t\t\t        if(key !== \"template\" &&! m2d2.utils.isFunction(value)) {\n                        //Look for ID:\n                        if(key && key.match(/^\\w/)) {\n                            let elem = $node.find(\"#\" + key);\n                            if(elem && options.indexOf(elem) === -1) { options.push(elem); }\n                            //Look for name:\n                            elem = $node.find(\"[name='\"+key+\"']\");\n                            if(elem && options.indexOf(elem) === -1) { options.push(elem); }\n                            //Look for class:\n                            const elems = Array.from($node.findAll(\".\" + key)).filter(i => options.indexOf(i) < 0)\n                            if(elems.length > 0) { elems.forEach(e => options.push(e)) }\n                        }\n                        //Look for element or free selector (e.g: \"div > span\"):\n                        const elems =  Array.from($node.findAll(key)).filter(i => options.indexOf(i) < 0)\n                        if(elems.length > 0) { elems.forEach(e => options.push(e)) }\n                    }\n\t\t\t\t} catch(e) {\n\t\t\t\t    console.error(\"Invalid selector: \" + key);\n\t\t\t\t    console.log(e);\n\t\t\t\t    return;\n\t\t\t\t}\n\t\t\t\tif(options.length > 1) {\n\t\t\t\t\tconst items = [];\n\t\t\t\t\toptions.forEach(item => {\n\t\t\t\t\t\titems.push(this.render(item, key, value));\n\t\t\t\t\t});\n\t\t\t\t\tthis.linkNode($node, key, items);\n\t\t\t\t\tif(value.warn === undefined || value.warn !== false) { //TODO: document\n\t\t\t\t\t\tconsole.log(\"Multiple elements were assigned with key: [\" + key + \"] under node: \")\n\t\t\t\t\t\tconsole.log($node);\n\t\t\t\t\t\tconsole.log(\"It might be what we expect, but if it is not expected it could result \" +\n\t\t\t\t\t\t\t\t\t\"on some elements mistakenly rendered. You can specify \" +\n\t\t\t\t\t\t\t\t\t\"'warn : false' under that element to hide this message.\") //TODO: add link to reference\n\t\t\t\t\t}\n\t\t\t\t} else if(options.length === 1) { // Found single option: place values\n\t\t\t\t\tconst opt = options[0];\n\t\t\t\t\tif(m2d2.utils.isElement(opt)) { //TODO: test (no template or no items)\n                        const obj = this.plainToObject(opt, value);\n                        const opt_key = m2d2.utils.isPlainObject(obj) && Object.keys(obj).length >= 1 ? Object.keys(obj)[0] : null;\n                        if(opt_key) {\n                            value = this.updateValue(opt, opt_key, origValue);\n                        }\n\t\t\t\t\t\tif(m2d2.utils.isArray(value)) { // Process Array\n\t\t\t\t\t\t\tconst template = object[\"template\"];\n\t\t\t\t\t\t\tthis.doItems(opt, value, template);\n\t\t\t\t\t\t\tthis.linkNode($node, key, opt);\n\t\t\t\t\t\t} else { // Normal Objects:\n\t\t\t\t\t\t\tthis.renderAndLink($node, opt, key, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(\"BUG: It should have been a node but got: \");\n\t\t\t\t\t\tconsole.log(opt);\n\t\t\t\t\t\tconsole.log(\"Parent node:\")\n\t\t\t\t\t\tconsole.log($node);\n\t\t\t\t\t}\n\t\t\t\t} else if(options.length === 0) { //No options found: create nodes\n\t\t\t\t    // Make \"items\" optional: //TODO: document\n\t\t\t\t\tif(key === \"template\" && object[\"items\"] === undefined) {\n\t\t\t\t\t    key = \"items\";\n\t\t\t\t\t    value = [];\n\t\t\t\t\t}\n\t\t\t\t\tconst isFunc = m2d2.utils.isFunction(value);\n\t\t\t\t\tif(value.tagName !== undefined) {\n\t\t\t\t\t\tconst $newNode = this.appendElement($node, value.tagName);\n\t\t\t\t\t\tthis.renderAndLink($node, $newNode, key, value);\n\t\t\t\t\t} else if(m2d2.utils.isValidElement(key) &&! isFunc) {\n\t\t\t\t\t\tconst $newNode = this.appendElement($node, key);\n\t\t\t\t\t\tthis.renderAndLink($node, $newNode, key, value);\n\t\t\t\t\t} else if(key === \"items\") { //Items creation\n\t\t\t\t\t\tconst template = object[\"template\"];\n\t\t\t\t\t\t// Allow use of plain object to specify value -> text //TODO: documentation\n\t\t\t\t\t\tif(m2d2.utils.isPlainObject(value)) {\n\t\t\t\t\t\t    const valTmp = [];\n\t\t\t\t\t\t    Object.keys(value).forEach(o => {\n\t\t\t\t\t\t    \tlet obj;\n\t\t\t\t\t\t    \tif($node.tagName === \"DL\") { //TODO: document DL\n\t\t\t\t\t\t\t\t\tobj = { dt : o, dd : value[o] }\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tobj = { text: value[o] };\n\t\t\t\t\t\t\t\t\tif (m2d2.utils.hasAttrOrProp($node, \"value\")) {\n\t\t\t\t\t\t\t\t\t\tobj.value = o;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tobj.dataset = {id: o};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalTmp.push(obj);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t    value = valTmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Process Array:\n\t\t\t\t\t\tif(m2d2.utils.isArray(value)) {\n\t\t\t\t\t\t\tthis.doItems($node, value, template);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(\"Warning: 'items' specified but value is not and array, in element: \");\n\t\t\t\t\t\t\tconsole.log($node);\n\t\t\t\t\t\t\tconsole.log(\"Passed values are: \");\n\t\t\t\t\t\t\tconsole.log(value);\n\t\t\t\t\t\t}\n    \t\t\t\t} else if(isFunc) {\n\t\t\t\t\t\tif(m2d2.updates) {\n\t\t\t\t\t\t    // By using addEventListener we can assign multiple listeners to a single node //TODO: document\n\t\t\t\t\t\t\tif (key === \"onupdate\") {\n\t\t\t\t\t\t\t\t$node.addEventListener(\"update\", value, true); //TODO: document\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$node[key] = value;\n\t\t\t\t\t} else if(key !== \"template\" && (key !== \"warn\" && value !== false)) { //We handle templates inside items\n\t\t\t\t\t\tif(object.warn === undefined || object.warn !== false) { //TODO: document\n\t\t\t\t\t\t\tconsole.error(\"Not sure what you want to do with key: \" + key + \" under element: \");\n\t\t\t\t\t\t\tconsole.log($node);\n\t\t\t\t\t\t\tconsole.log(\"And object:\");\n\t\t\t\t\t\t\tconsole.log(object);\n\t\t\t\t\t\t\tconsole.log(\"Most likely the element's property or child no longer exists or the value\" +\n\t\t\t\t\t\t\t\t\t\t\" passed to it is incorrect.\");\n\t\t\t\t\t\t\tconsole.log(\"You can set 'warn : false' property to the element to dismiss this message.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$node[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// Dispatch onload event (if its not native): //TODO: Document\n\t\tif($node.onload) {\n\t\t    const native = [\"BODY\",\"FRAME\",\"IFRAME\",\"IMG\",\"LINK\",\"SCRIPT\",\"STYLE\"].indexOf($node.tagName) >= 0;\n\t\t    const inputImage = $node.tagName === \"INPUT\" && $node.type === \"image\";\n\t\t    if(! (native || inputImage)) {\n\t\t        // We don't need to add the event as it exists natively and it was assigned during: $node.onload = ...;\n                $node.dispatchEvent(new CustomEvent('load'));\n\t\t    }\n\t\t}\n\t\treturn $node;\n\t}\n\n    /**\n     * Identify if value is an update link (inline onupdate)\n\t * @param {*} value\n     * @returns {boolean}\n     */\n    isUpdateLink(value) {\n        let isLink = false\n        if(m2d2.utils.isArray(value) && (value.length === 2 || value.length === 3)) {\n            const twoArgs = value.length === 2;\n            // First element in array must be Node || DomStringMap (dataset) || CSSStyleDeclaration (style)\n            const acceptedType = m2d2.utils.isNode(value[0]) ||\n                value[0] instanceof DOMStringMap ||\n                value[0] instanceof CSSStyleDeclaration\n            // Second must be 'string' and Third can be a 'function'\n            const otherTypes = twoArgs ? m2d2.utils.isString(value[1]) :\n                          m2d2.utils.isString(value[1]) && m2d2.utils.isFunction(value[2]);\n            // If only two args are in array, add an empty function:\n            isLink = acceptedType && otherTypes;\n            if(isLink && twoArgs) { value.push(v => { return v; }) } //TODO: Document function\n        }\n        return isLink\n    }\n\n    /**\n\t * Convert plain value into object if needed\n\t * @param {HTMLElement, Node} $node\n\t * @param {*} value\n\t */\n    plainToObject($node, value) {\n\t\tif(!m2d2.utils.isPlainObject(value) &&! m2d2.utils.isFunction(value) &&! m2d2.utils.isElement(value)) {\n\t\t\t// When setting values to the node (simplified version):\n\t\t\tif(m2d2.utils.isHtml(value)) {\n\t\t\t\tvalue = { html : value };\n\t\t    } else if(this.isUpdateLink(value)) {\n                const obj  = value[0];\n                const prop = value[1];\n                const callback = value[2];\n\t\t        let tmpVal = this.plainToObject($node, callback(obj[prop]));\n\t\t        if(m2d2.utils.isPlainObject(tmpVal)) {\n\t\t            const newValue = {};\n\t\t            Object.keys(tmpVal).forEach(k => {\n\t\t                newValue[k] = value;\n\t\t            });\n\t\t            value = newValue;\n\t\t        }\n\t\t\t} else if(m2d2.utils.isArray(value)) {\n\t\t\t    value = { items : value };\n\t\t\t} else if(m2d2.utils.hasAttrOrProp($node, \"value\")) {\n\t\t\t\t// If the parent is <select> set also as text to item:\n\t\t\t\tif($node.tagName === \"SELECT\") {\n\t\t\t\t    value = {\n\t\t\t\t        value : value,\n\t\t\t\t        text  : value\n\t\t\t\t    };\n\t\t\t\t} else if($node.tagName === \"BUTTON\") {\n\t\t\t\t    value = { text : value };\n\t\t\t\t} else {\n\t\t\t\t    value = { value : value };\n\t\t\t\t}\n\t\t\t} else if(m2d2.utils.isString(value) && $node.tagName === \"IMG\") {\n\t\t\t    value = { src : value };\n\t\t\t} else if(m2d2.utils.isString(value) || m2d2.utils.isNumeric(value)) {\n\t\t\t\tvalue = { text : value };\n\t\t\t}\n\t\t}\n\t\treturn value;\n    }\n\t/**\n\t * Render and Link a node\n\t * @private\n\t * @param {HTMLElement} $root\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n\t */\n\trenderAndLink($root, $node, key, value) {\n\t\tconst $child = this.render($node, key, value);\n\t\tthis.linkNode($root, key, $child);\n\t}\n\t/**\n\t * Render some value in a node\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n\t * @returns {Proxy, HTMLElement}\n\t */\n\trender($node, key, value) {\n\t    value = this.plainToObject($node, value);\n\t\treturn this.doDom($node, value); // Recursive for each element\n\t}\n\n\t/**\n\t * Links a property to a child node\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {String} key\n\t * @param {HTMLElement} $child\n\t */\n\tlinkNode($node, key, $child) {\n\t\tif($node[key] === $child) {\n\t\t\tconst $proxy = this.proxy($child);\n\t\t\ttry {\n\t\t\t\t$node[key] = $proxy;\n\t\t\t} catch(ignore) {\n\t\t\t\t//NOTE: although it fails when using forms, form is a proxy so it still works.\n\t\t\t}\n\t\t\t$node[\"$\" + key] = $proxy;\n\t\t} else if(m2d2.utils.hasAttrOrProp($node, key)) { // Only if its not an attribute or property, we \"link\" it.\n\t\t\t$node[\"$\" + key] = $child; //Replace name with \"$\" + name\n\t\t\tconsole.log(\"Property : \" + key + \" existed in node: \" + $node.tagName +\n\t\t\t\". Using $\" + key + \" instead for node: \" + $child.tagName + \".\")\n\t\t} else {\n\t\t\t$node[key] = this.proxy($child);\n\t\t}\n\t}\n\t/**\n\t * Creates a dom element inside $node\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} tagName\n\t * @returns {HTMLElement}\n\t */\n\tappendElement ($node, tagName) {\n\t\tconst $newElem = m2d2.utils.newElement(tagName);\n\t\t$node.append($newElem);\n\t\treturn $newElem;\n\t}\n\n    /**\n\t * Get an item to be added\n\t * @param {HTMLElement|null} $node\n\t * @param {number|string} index\n\t * @param {*} obj\n\t * @param {HTMLElement} $template\n\t */\n\tgetItem($node, index, obj, $template) {\n\t    if(!$template) {\n\t\t    $template = this.getTemplate($node);\n\t\t}\n        const $newItem = $template.cloneNode(true);\n\t    // Copy templates to new item:\n\t    this.addTemplatesToItem($template, $newItem);\n        $newItem.dataset.id = index;\n        // Add \"selected\" property\n        this.setUniqueAttrib($newItem, \"selected\"); //TODO: Document\n        // Add template to object //TODO: it might not work with events\n        this.addTemplatesToObjectDeep($template, obj);\n        // Set values and links\n\t\tlet $newNode = this.doDom($newItem, obj);\n\t\t// Place Events:\n\t\treturn this.getItemWithEvents($node, $newNode);\n\t}\n\n    /**\n     * Try to set template to objects deep in tree\n     */\n\taddTemplatesToObjectDeep($template, obj) {\n        if(m2d2.utils.isPlainObject(obj)) {\n            Object.keys(obj).forEach(key => {\n                if($template[key] && $template[key].__template &&! obj.template) {\n                    obj[key].template = $template[key].__template;\n                }\n                if($template[key] && obj[key]) {\n                    this.addTemplatesToObjectDeep($template[key], obj[key]);\n                }\n            });\n        }\n\t}\n\n\t/**\n\t * Reassign templates\n\t * @param {HTMLElement, Node} $template\n\t * @param {HTMLElement, Node} $newNode\n\t * @returns {HTMLElement|Proxy}\n\t // TODO: this does not support deep location of templates\n\t */\n\taddTemplatesToItem($template, $newNode) {\n\t    [\"_template\",\"__template\"].forEach(key => {\n            if($template[key] !== undefined) {\n                $newNode[key] = $template[key];\n            }\n        });\n\t}\n\n\t/**\n\t * Returns a Node with events\n\t * @param {HTMLElement, Node} $node\n\t * @param {HTMLElement, Node} $newNode\n\t * @returns {HTMLElement|Proxy}\n\t //FIXME: I think `this.doDom` could be removed from here and only \"link\" events\n\t */\n\tgetItemWithEvents($node, $newNode) {\n\t\tif($node.__template !== undefined) {\n\t\t\tconst scan = (object, result) => {\n\t\t\t\tresult = result || {};\n\t\t\t\tObject.keys(object).forEach(key=> {\n\t\t\t\t\tif (m2d2.utils.isPlainObject(object[key])) {\n\t\t\t\t\t\tresult[key] = scan(object[key]);\n\t\t\t\t\t} else if(m2d2.utils.isFunction(object[key])) {\n\t\t\t\t\t\tresult[key] = object[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tlet tree = scan($node.__template);\n\t\t\tif(!m2d2.utils.isEmpty(tree)) {\n\t\t\t\ttree = tree[Object.keys(tree)[0]];\n\t\t\t\t$newNode = this.doDom($newNode, tree);\n\t\t\t}\n\t\t}\n\t\treturn $newNode;\n\t}\n\n\t/**\n\t * Process items\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {Array} values\n\t * @param {Object} template\n\t */\n\tdoItems ($node, values, template) {\n\t    // Create the structure for the item:\n\t\tconst $template = this.getTemplate($node, template);\n\t\tif($template === undefined) {\n\t\t\tconsole.error(\"Template not found. Probably an array is being used where it is not expected. Node:\");\n\t\t\tconsole.log($node);\n\t\t\tconsole.log(\"Value (mistaken?):\")\n\t\t\tconsole.log(values);\n\t\t\treturn;\n\t\t}\n\t\t// Fill the template with data:\n\t\tlet i = 0;\n\t\tvalues.forEach(val => {\n\t\t    val = this.plainToObject($node, val);\n\t\t    const $newItem = this.getItem($node, i++, val, $template);\n\t\t    if($newItem) {\n\t\t\t    $node.append($newItem);\n\t\t\t}\n\t\t});\n\t\t// Cleanup\n\t\tconst $temp = $node.find(\"template\");\n\t\tif($temp) { $node.removeChild($temp); }\n\t\t// Set \"items\" link:\n\t\t$node.items = $node.children;\n\t\tthis.extendItems($node);\n\t}\n\t/** Returns an HTMLElement with the structure without events\n\t * @private\n\t * @param {HTMLElement} $node\n\t * @param {Object, string} [template]\n\t * @returns {HTMLElement}\n\t */\n\tgetTemplate ($node, template) {\n\t\t// If we already have the template, return it:\n\t\tif($node._template !== undefined && $node._template !== \"\") {\n\t\t\treturn $node._template;\n\t\t} else {\n\t\t\tlet $template;\n\t\t\tconst $htmlTemplate = $node.querySelector(\"template\"); // look into HTML under node\n\t\t\tif($htmlTemplate) {\n\t\t\t\t$template = m2d2.utils.htmlElement($htmlTemplate.innerHTML.trim());\n\t\t\t} else {\n                switch ($node.tagName) {\n                    case \"SELECT\":\n                    case \"DATALIST\":\n                        $template = m2d2.utils.newElement(\"option\");\n                        break;\n                    case \"UL\":\n                    case \"OL\":\n                        $template = m2d2.utils.newElement(\"li\");\n                        break;\n                    case \"NAV\":\n                        $template = m2d2.utils.newElement(\"a\");\n                        break;\n                    case \"DL\":\n                        $template = m2d2.utils.newElement(\"dd\");\n                        break;\n                    default:\n                        if(template && m2d2.utils.isPlainObject(template)) {\n                            const children = Object.keys(template).length;\n                            if(children) {\n                                if(children > 1) {\n                                    if(template.tagName !== undefined) { //TODO: document (optional top child when using tagName)\n                                        let wrap = {};\n                                        wrap[template.tagName] = template;\n                                        template = wrap;\n                                    } else {\n                                        console.log(\"Template has more than one top elements. Using the first one. In: \");\n                                        console.log(template);\n                                        console.log(\"Node: \");\n                                        console.log($node);\n                                    }\n                                }\n                                const key = Object.keys(template)[0];\n                                const val = template[key];\n                                if(m2d2.utils.isValidElement(key)) {\n                                    $template = m2d2.utils.newElement(key);\n                                } else if(val.tagName !== undefined) {\n                                    $template = m2d2.utils.newElement(val.tagName);\n\t\t\t\t\t\t\t\t\ttemplate[val.tagName] = val;\n\t\t\t\t\t\t\t\t\tdelete(template[key]);\n                                } else {\n                                    console.error(\"Template defined an element which can not be identified: [\" + key + \"], using <span> in:\");\n                                    console.log(template);\n                                    console.log(\"Node: \");\n                                    console.log($node);\n                                    $template = m2d2.utils.newElement(\"span\");\n                                }\n                            } else {\n                                console.error(\"Template has no definition, and it can not be guessed. Using <span>. Template: \");\n                                console.log(template);\n                                console.log(\"Node: \");\n                                console.log($node);\n                                $template = m2d2.utils.newElement(\"span\");\n                            }\n                        } else {\n                            // If not template is found, use html as of element\n                            if($node.childElementCount > 0) {\n                                $template = m2d2.utils.htmlElement($node.innerHTML.trim());\n                            }\n                        }\n                        break;\n                }\n            }\n\t\t\tif (template) {\n\t\t\t\tif (m2d2.utils.isPlainObject(template)) {\n\t\t\t\t    const $wrap = m2d2.utils.newEmptyNode();\n\t\t\t\t    $wrap.append($template);\n\t\t\t\t\tconst $fragment = this.doDom($wrap, template);\n\t\t\t\t\t$template = $fragment.children[0];\n\t\t\t\t\tm2d2.utils.defineProp($node, \"__template\", template); // This is the original template with events\n\t\t\t\t} else if (m2d2.utils.isHtml(template)) {\n\t\t\t\t\t$template = m2d2.utils.htmlElement(template);\n\t\t\t\t} else if (m2d2.utils.isSelectorID(template)) { //Only IDs are allowed //TODO document\n\t\t\t\t\t$template = m2d2.utils.htmlElement(document.querySelector(template).innerHTML);\n\t\t\t\t} else { //When its just a tag name\n\t\t\t\t\t$template = m2d2.utils.newElement(template);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($template) {\n                if($template.childrenElementCount > 1) {\n                    console.log(\"Templates only supports a single child. Multiple children were detected, wrapping them with <span>. Template:\");\n                    console.log($template);\n                    const $span = m2d2.utils.newElement(\"span\");\n                    $span.append($template);\n                    $template = $span;\n                } else {\n\t\t\t\t    m2d2.utils.defineProp($node, \"_template\", $template); // This is the DOM\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t    console.log(\"Template was not found for element, using <span>:\");\n\t\t\t    console.log($node);\n                const $span = m2d2.utils.newElement(\"span\");\n                $template = $span;\n\t\t\t}\n\t\t\treturn $template;\n\t\t}\n\t}\n\n\t/**\n\t * It will set a unique attribute among a group of nodes (grouped by parent)\n\t * @private\n\t * @param {HTMLElement, Node} $node\n\t * @param {string} key\n\t */\n\tsetUniqueAttrib($node, key) {\n        if(! $node.hasOwnProperty(key)) {\n            Object.defineProperty($node, key, {\n                get : function()    {\n                    return this.hasAttribute(key);\n                },\n                set : function(val) {\n                    const prevSel = this.parentNode ? this.parentNode.find(\"[\"+key+\"]\") : null;\n                    if(prevSel) {\n                        prevSel.removeAttribute(key);\n                    }\n\t\t\t\t\tm2d2.utils.setAttr(this, key, val);\n                }\n            });\n        }\n\t}\n\n    /**\n     * Handle [ Node, string ] values (inline onupdate)\n     * @private\n\t * @param {HTMLElement} $node\n\t * @param {string} key\n\t * @param {*} value\n     */\n    updateValue($node, key, value) {\n\t\t// TEST: 06\n        if(this.isUpdateLink(value)) {\n\t\t\tconst _this = this;\n            const obj  = value[0];\n            const prop = value[1];\n            const callback = value[2];\n\t\t\tvalue = obj[prop];\n\t\t\tif(obj instanceof CSSStyleDeclaration && this._stored.styles.includes(obj)) {\n\t\t\t\tconst parent = this._stored.styleNodes[this._stored.styles.indexOf(obj)];\n\t\t\t\tif(m2d2.updates) {\n\t\t\t\t\tparent.onupdate = function (ev) {\n\t\t\t\t\t\tif (ev.detail && ev.detail.property === \"style\" && ev.detail.newValue.startsWith(prop + \":\")) {\n\t\t\t\t\t\t\t_this.setShortValue($node, key, callback(this.style[prop]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(obj instanceof DOMStringMap && this._stored.datasets.includes(obj)) {\n\t\t\t\tconst parent = this._stored.datasetNodes[this._stored.datasets.indexOf(obj)];\n\t\t\t\tif(m2d2.updates) {\n\t\t\t\t\tparent.onupdate = (ev) => {\n\t\t\t\t\t\tif (ev.detail && ev.detail.property === \"data-\" + prop) {\n\t\t\t\t\t\t\t_this.setShortValue($node, key, callback(ev.detail.newValue));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(m2d2.updates) {\n\t\t\t\t\tobj.onupdate = (ev) => {\n\t\t\t\t\t\tif (ev.detail && ev.detail.property === prop) {\n\t\t\t\t\t\t\tif (!m2d2.utils.isObject($node[key])) {\n\t\t\t\t\t\t\t\t_this.setShortValue($node, key, callback(ev.detail.newValue));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Place a value either in a property or in a node (short)\n\t * @param $node {Node}\n\t * @param key {string}\n\t * @param value {*}\n\t */\n\tsetShortValue($node, key, value) {\n\t\tif(m2d2.utils.isNode($node[key])) {\n\t\t\tif(m2d2.short) {\n\t\t\t\tconst o = this.plainToObject($node[key], value);\n\t\t\t\tconst k = m2d2.utils.isPlainObject(o) && Object.keys(o).length >= 1 ? Object.keys(o)[0] : null;\n\t\t\t\tif (k) {\n\t\t\t\t\t$node[key][k] = value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Short is disabled. Trying to set a value (\"+value+\") in a node:\")\n\t\t\t\tconsole.log($node[key]);\n\t\t\t\tconsole.log(\"Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'\")\n\t\t\t}\n\t\t} else {\n\t\t\t$node[key] = value\n\t\t}\n\t}\n\n\t/**\n\t * Place a value either in a property or in a node (short)\n\t * @param $node {Node}\n\t * @param key {string}\n\t * @param sample {*} Sample value (to automatically guess property)\n\t * @returns {*} current value\n\t */\n\tgetShortValue($node, key, sample) {\n\t\tlet value = null;\n\t\tif(m2d2.utils.isNode($node[key])) {\n\t\t\tif(m2d2.short) {\n\t\t\t\tconst o = this.plainToObject($node[key], sample || \"\");\n\t\t\t\tconst k = m2d2.utils.isPlainObject(o) && Object.keys(o).length >= 1 ? Object.keys(o)[0] : null;\n\t\t\t\tif (k) {\n\t\t\t\t\tvalue = $node[key][k];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Short is disabled. Trying to get a value from node:\")\n\t\t\t\tconsole.log($node[key]);\n\t\t\t\tconsole.log(\"Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'\")\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = $node[key];\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Basic Proxy to enable assign values to elements\n\t * for example: div.a = \"Click me\" (instead of using: div.a.text)\n\t * NOTE: for reading, \"div.a\" will return a Node and not the value.\n\t * @private\n\t * @param {Object} obj\n\t * @param {boolean} [force] Force to update\n\t * @returns {Proxy, Object}\n\t */\n\tproxy (obj, force) {\n\t    if(!m2d2.short || (obj === null || (obj.domNode !== undefined && force === undefined))) {\n\t        return obj;\n\t    } else {\n\t        obj.domNode = obj;\n            const handler = {\n                get: (target, property) => {\n                    const t = target[property];\n                    switch (true) {\n\t\t\t\t\t\tcase t === null || t === undefined: return null;\n                    \t// Functions should bind target as \"this\"\n\t\t\t\t\t\tcase m2d2.utils.isFunction(t): return t.bind(target);\n\t\t\t\t\t\t// If there was a failed attempt to set proxy, return it on read:\n\t\t\t\t\t\tcase t.domNode && target[\"$\" + property] !== undefined: return target[\"$\" + property];\n\t\t\t\t\t\tcase t.domNode === undefined && m2d2.utils.isElement(t): return this.proxy(t);\n\t\t\t\t\t\tdefault: return t;\n\t\t\t\t\t}\n                },\n                set: (target, property, value) => {\n                    let oldValue = \"\";\n                    if(m2d2.utils.isElement(target[property])) {\n\t\t\t\t\t\toldValue = this.getShortValue(target, property, value);\n\t\t\t\t\t\tthis.setShortValue(target, property, value);\n                    } else if(property === \"onupdate\") {\n                    \tif(m2d2.updates) {\n\t\t\t\t\t\t\tif (m2d2.utils.isFunction(value)) {\n\t\t\t\t\t\t        // By using addEventListener we can assign multiple listeners to a single node\n\t\t\t\t\t\t\t\ttarget.addEventListener(\"update\", value, true);\n\t\t\t\t\t\t\t\toldValue = target[property];\n\t\t\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error(\"Value passed to 'onupdate' is incorrect, in node:\");\n\t\t\t\t\t\t\t\tconsole.log(target);\n\t\t\t\t\t\t\t\tconsole.log(\"Value: (not a function)\");\n\t\t\t\t\t\t\t\tconsole.log(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n                    \t\tconsole.log(\"Updates are not available when `m2d2.updates == false`:\")\n\t\t\t\t\t\t\tconsole.log(target);\n\t\t\t\t\t\t}\n                    } else if(property === \"items\") { //Reset items\n                        target.items.clear();\n                        this.doItems(target, value);\n                    } else {\n                        oldValue = target[property];\n                        value = this.updateValue(target, property, value);\n                        target[property] = value;\n                    }\n\t\t\t\t\t// Check for onupdate //TODO: document\n\t\t\t\t\t// This will observe changes on values\n\t\t\t\t\tif(m2d2.updates && target.onupdate !== undefined) {\n\t\t\t\t\t    if(value !== oldValue) {\n                            target.dispatchEvent(new CustomEvent(\"update\", {\n                                detail: {\n                                    type     : typeof value,\n                                    property : property,\n                                    newValue : value,\n                                    oldValue : oldValue\n                                }\n                            }));\n\t\t\t\t\t    }\n\t\t\t\t\t}\n                    return true;\n                }\n            };\n            return new Proxy(obj, handler);\n\t\t}\n\t}\n\n\t/**\n\t * Function passed to MutationObserver\n\t * @private\n\t * @param {MutationRecord} mutationsList\n\t * @param {MutationObserver} observer\n\t */\n\tonObserve(mutationsList, observer) {\n\t\tmutationsList.forEach(m => {\n\t\t\tconst target = m.target;\n\t\t\t// We store the events to remove immediately repeated events.\n\t\t\t// Forms will link elements which can not be set as proxy so we\n\t\t\t// add a link named `\"$\" + key` but this have the side effect to\n\t\t\t// generate two triggers (one for the element and one for the Proxy).\n\t\t\tif(this._stored.events.indexOf(m) >= 0) { return } else {\n\t\t\t\tthis._stored.events.push(m);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst i = this._stored.events.indexOf(m);\n\t\t\t\t\tif(i >= 0) { this._stored.events.splice(i, 1); }\n\t\t\t\t}, m2d2.storedEventsTimeout); //TODO: this will prevent repeated events to be triggered in less than 50ms : document\n\t\t\t}\n\t\t\t// Check for onupdate //TODO: document\n\t\t\tif(target.onupdate !== undefined) {\n\t\t\t\tif(m.type === \"attributes\") {\n\t\t\t\t\tconst value = m2d2.utils.getAttrOrProp(target, m.attributeName);\n\t\t\t\t\tif(value !== m.oldValue) {\n                        target.dispatchEvent(new CustomEvent(\"update\", {\n                            detail: {\n                                type     : typeof value,\n                                property : m.attributeName,\n                                newValue : value,\n                                oldValue : m.oldValue\n                            }\n                        }));\n                    }\n\t\t\t\t} else if(m.type === \"childList\") { //TODO: improve for other types\n\t\t\t\t    const $child = m.addedNodes[0] || m.removedNodes[0];\n\t\t\t\t\tif($child.nodeName === \"#text\") {\n\t\t\t\t\t\tconst value = m.addedNodes[0].textContent;\n\t\t\t\t\t\tconst oldValue = m.removedNodes.length ? m.removedNodes[0].textContent : null;\n\t\t\t\t\t\tif(value !== oldValue) {\n                            target.dispatchEvent(new CustomEvent(\"update\", {\n                                 detail: {\n                                     type     : typeof value,\n                                     property : \"text\",\n                                     newValue : value,\n                                     oldValue : oldValue\n                                 }\n                             }));\n                         }\n\t\t\t\t\t} else if(target.items !== undefined) { //Items updated\n\t\t\t\t\t    //TODO: Document: in case of items, \"new = added\", \"old = removed\"\n\t\t\t\t\t\tconst value = m.addedNodes;\n\t\t\t\t\t\tconst oldValue = m.removedNodes;\n\t\t\t\t\t\tif(value !== oldValue) {\n                            target.dispatchEvent(new CustomEvent(\"update\", {\n                                 detail: {\n                                     type     : typeof value,\n                                     property : \"items\",\n                                     newValue : value,\n                                     oldValue : oldValue\n                                 }\n                             }));\n                         }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Add MutationObserver to object\n\t * @private\n\t * @param { HTMLElement } $node\n\t */\n\tobserve($node) {\n\t\tif(m2d2.updates) {\n\t\t\tconst mutationObserver = new MutationObserver(this.onObserve.bind(this))\n\t\t\tconst options = {\n\t\t\t\tattributeOldValue: true\n\t\t\t}\n\t\t\toptions.subtree = true;\n\t\t\toptions.childList = true;\n\t\t\tconst toObserve = $node.domNode || $node;\n\t\t\tmutationObserver.observe(toObserve, options);\n\t\t}\n\t}\n\n\t/**\n\t * Get the root node as proxy\n\t * @private\n\t * @param {string|HTMLElement} selector\n\t * @param {Object} obj\n\t */\n\tgetProxyNode(selector, obj) {\n\t\tconst $node = this.doDom(selector, obj);\n\t\tif($node) {\n\t\t    this.observe($node);\n\t\t    return this.proxy($node);\n\t\t}\n\t}\n\n\t/**\n\t * Extends \"items\"\n\t * @private\n\t * @param {NodeList, HTMLCollection} $node\n\t */\n\textendItems($node) {\n\t\t// We try to add most of the array functions into NodeList and HTMLCollection:\n\t\t// NOTE: Not all will work as expected.\n\t\t// NOTE: function() {} is not the same here as () => {} as \"this\" is not as expected\n\t\tfunction reattach(items) {\n\t\t\titems.forEach(itm => {\n\t\t\t\tconst parent = itm.parentNode;\n\t\t\t\tconst detatchedItem = parent.removeChild(itm);\t//We detach from original parent\n\t\t\t\t$node.append(detatchedItem); //Attach to $node (works with non-existing elements)\n\t\t\t});\n\t\t}\n\t\tconst items = $node.items;\n\t\t// Non-Standard or non-existent in Array:\n\t\tconst nonStd = [\"clear\", \"get\", \"remove\", \"selected\", \"first\", \"last\", \"findAll\"];\n\t\t// Array properties:\n\t\tObject.getOwnPropertyNames(Array.prototype).concat(nonStd).forEach(method => {\n\t\t\tif(items[method] === undefined) {\n\t\t\t\tlet func = null;\n\t\t\t\tconst _this = this;\n\t\t\t\tswitch (method) {\n\t\t\t\t    //-------------------- Same as in Array --------------------------\n\t\t\t\t\tcase \"copyWithin\": // copy element from index to index\n\t\t\t\t\tcase \"fill\": // replace N elements in array\n\t\t\t\t\tcase \"splice\": // add or remove elements\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        console.log(\"Not available yet: \" + method);\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"reverse\": // reverse the order\n\t\t\t\t\t\tfunc = function(...args) {\n\t\t\t\t\t        if(this.items.length) {\n                                const items = Array.from(this.items); //Keep a copy\n                                const retObj = items[method](...args);\n                                reattach(items);\n                                return retObj;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t//--------------------- Special Implementation --------------------\n\t\t\t\t\tcase \"clear\": // parentNode.replaceChildren() can also be used\n\t\t\t\t\t\tfunc = function() {\n\t\t\t\t\t\t\twhile(this.items[0]) this.items[0].remove()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get\": // will return the item with data-id:\n\t\t\t\t\t    func = function(id) {\n\t\t\t\t\t        let found = null;\n\t\t\t\t\t        if(this.items.length) {\n\t\t\t\t\t            this.items.some(item => {\n\t\t\t\t\t                const sameId = m2d2.utils.isNumeric(id) ? (item.dataset.id * 1) === id * 1 : item.dataset.id === id;\n\t\t\t\t\t                if(item.dataset && sameId) {\n\t\t\t\t\t                    found = item;\n\t\t\t\t\t                    return true;\n\t\t\t\t\t                }\n\t\t\t\t\t            });\n\t\t\t\t\t        }\n\t\t\t\t\t        return found;\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"selected\": // will return the selected item in list\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        return _this.proxy(this.find(\":scope > \" + \"[selected]\")); //only direct children\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"first\": // returns the first item in list\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        return _this.proxy(this.items[0]);\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"last\": // returns the last item in list\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        return _this.proxy(this.items[this.items.length - 1]);\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"pop\" : //Remove and return last element:\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        if(this.items.length) {\n                                const parent = this[0].parentNode;\n                                return _this.proxy(parent.removeChild(this.items[this.items.length - 1]));\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"push\": // Add one item at the end:\n\t\t\t\t\t\tfunc = function(obj) {\n\t\t\t\t\t\t    obj = _this.plainToObject(this, obj);\n\t\t\t\t\t\t\tif(m2d2.utils.isElement(obj)) {\n\t\t\t\t\t\t\t\tthis.append(obj);\n\t\t\t\t\t\t\t} else if (m2d2.utils.isPlainObject(obj)) {\n\t\t\t\t\t\t\t    const index = this.items.length;\n\t\t\t\t\t\t\t    const $child = _this.getItem(this, index, obj);\n\t\t\t\t\t\t\t    this.appendChild($child);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t    console.log(\"Trying to push an unknown value into a list:\");\n\t\t\t\t\t\t\t    console.log(obj)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"remove\": // will return the item with data-id:\n\t\t\t\t\t    func = function(id) {\n\t\t\t\t\t        if(this.items.length) {\n\t\t\t\t\t            const elem = this.items.get(id);\n\t\t\t\t\t            if(elem.length === 1) {\n\t\t\t\t\t                elem.remove();\n\t\t\t\t\t            }\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"shift\": // remove and return first item:\n\t\t\t\t\t    func = function() {\n\t\t\t\t\t        if(this.items.length) {\n                                const parent = this.items[0].parentNode;\n                                return _this.proxy(parent.removeChild(this.items[0]));\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t    break;\n\t\t\t\t\tcase \"sort\": // You can pass a function to compare items:\n\t\t\t\t\t\tfunc = function(compareFunc) {\n\t\t\t\t\t        if(this.items.length) {\n                                const items = Array.from(this.items); //Keep copy\n                                items.sort(compareFunc || ((a, b) => {\n                                    return a.text.localeCompare(b.text);\n                                }));\n                                reattach(items);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"unshift\": // Add an item to the beginning\n\t\t\t\t\t\tfunc = function(obj) {\n\t\t\t\t\t\t    obj = _this.plainToObject(this, obj);\n\t\t\t\t\t\t\tif(m2d2.utils.isElement(obj)) {\n\t\t\t\t\t\t\t\tthis.prepend(obj);\n\t\t\t\t\t\t    } else if (m2d2.utils.isPlainObject(obj)) {\n\t\t\t\t\t\t\t    const index = this.items.length;\n\t\t\t\t\t\t\t    const $child = _this.getItem(this, index, obj);\n\t\t\t\t\t\t\t    this.prepend($child);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t    console.log(\"Trying to unshift an unknown value into a list:\");\n\t\t\t\t\t\t\t    console.log(obj)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t    break;\n\t\t\t\t\tdefault: //----------------- Link to Array -------------------\n\t\t\t\t\t    let arrMethod = method;\n\t\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\n\t\t\t\t\t\tswitch(true) {\n\t\t\t\t\t        case method === \"findAll\":\n\t\t\t\t\t            arrMethod = \"filter\"; // Use \"filter\"\n                            case m2d2.utils.isFunction(Array.prototype[method]):\n                                // Convert nodes to proxy so we can use short assignment\n                                // at, concat, every, filter, find, findIndex, forEach, includes, indexOf, join,\n                                // keys, lastIndexOf, map, reduce, reduceRight, slice, some, values\n                                const arrFunc = function (...args) {\n                                    const proxies = [];\n                                    Array.from($node.items).forEach(n => {\n                                        proxies.push(_this.proxy(n));\n                                    });\n                                    return Array.from(proxies)[arrMethod](...args);\n                                }\n                                switch(method) {\n                                    // Change behaviour of find: //TODO: documentation\n                                    case \"find\":\n                                        func = function(...args) {\n                                            if(m2d2.utils.isString(args[0])) {\n                                                return this.find(args[0]);\n                                            } else {\n                                                return arrFunc(...args);\n                                            }\n                                        }\n                                        break\n                                    case \"findAll\":  //TODO: documentation\n                                        func = function(...args) {\n                                            if(args.length === 0) {\n                                                return this.findAll();\n                                            } else if(m2d2.utils.isString(args[0])) {\n                                                return this.findAll(args[0]);\n                                            } else {\n                                                return arrFunc(...args);\n                                            }\n                                        }\n                                        break\n                                    case \"concat\": //TODO: documentation\n                                        func = function(...args) {\n                                            for(let i = 0; i < args.length; i++) {\n                                                if(m2d2.utils.isArray(args[i])) {\n                                                    for(let j = 0; j < args[i].length; j++) {\n                                                        let obj = args[i][j];\n\t\t\t\t\t\t\t                            if(! m2d2.utils.isElement(obj)) {\n                                                            obj = _this.plainToObject(this, args[i][j]);\n                                                            if (m2d2.utils.isPlainObject(obj)) {\n\t\t\t\t\t\t\t                                    const index = this.items.length;\n                                                                obj = _this.getItem(this, index, obj);\n                                                            }\n                                                        }\n                                                        this.items.push(obj);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        break\n                                    default:\n                                        func = arrFunc;\n                                        break\n                                }\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(func) {\n\t\t\t\t\tm2d2.utils.defineProp(items, method, func.bind($node)); //bind: specify the \"this\" value\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}"]}